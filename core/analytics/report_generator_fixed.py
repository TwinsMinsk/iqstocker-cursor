"""Fixed report generator according to specification."""

from datetime import datetime
from typing import Dict, Any
from core.analytics.advanced_csv_processor import AdvancedProcessResult
from core.analytics.recommendation_engine import RecommendationEngine
from core.utils.html_cleaner import safe_format_for_telegram
from bot.lexicon.lexicon_ru import LEXICON_RU


class FixedReportGenerator:
    """Fixed report generator that follows specification requirements."""
    
    def __init__(self):
        self.recommendation_engine = RecommendationEngine()
    
    def generate_monthly_report(self, result: AdvancedProcessResult) -> Dict[str, Any]:
        """Generate monthly report data for sequential message sending."""
        
        # Get all recommendations (without acceptance_rate)
        recommendations = self.recommendation_engine.get_all_recommendations(
            portfolio_rate=result.portfolio_sold_percent,
            new_work_rate=result.new_works_sales_percent,
            limit_usage=result.upload_limit_usage
        )
        
        # Parse month and year from period_human_ru (e.g., "–∞–≤–≥—É—Å—Ç 2025")
        parts = result.period_human_ru.split()
        month = parts[0] if len(parts) > 0 else ""
        year = parts[1] if len(parts) > 1 else ""
        
        # Prepare data for all messages
        return {
            # Basic data for summary message
            'month': month,
            'year': year,
            'sales_count': result.rows_used,
            'revenue': f"{result.total_revenue_usd:.2f}",
            'avg_price': f"{result.avg_revenue_per_sale:.4f}",
            'sold_portfolio_percentage': f"{result.portfolio_sold_percent:.2f}",
            'new_works_percentage': f"{result.new_works_sales_percent:.2f}",
            'upload_limit_usage': f"{result.upload_limit_usage:.0f}",
            
            # Recommendation texts
            'sold_portfolio_text': self._get_sold_portfolio_recommendation(result.portfolio_sold_percent),
            'new_works_text': recommendations['new_work_rate_recommendation'],
            'upload_limit_text': recommendations['limit_usage_recommendation']
        }

    def generate_combined_report_for_archive(self, result: AdvancedProcessResult) -> str:
        """Generate combined report text for archive storage."""
        
        # Get all recommendations (without acceptance_rate)
        recommendations = self.recommendation_engine.get_all_recommendations(
            portfolio_rate=result.portfolio_sold_percent,
            new_work_rate=result.new_works_sales_percent,
            limit_usage=result.upload_limit_usage
        )
        
        # Parse month and year from period_human_ru
        parts = result.period_human_ru.split()
        month = parts[0] if len(parts) > 0 else ""
        year = parts[1] if len(parts) > 1 else ""
        
        # Get recommendation texts
        sold_portfolio_text = self._get_sold_portfolio_recommendation(result.portfolio_sold_percent)
        new_works_text = recommendations['new_work_rate_recommendation']
        upload_limit_text = recommendations['limit_usage_recommendation']
        
        # Create combined report text
        combined_report = f"""üìä <b>–û–¢–ß–Å–¢ –ó–ê {month} {year} –ì–û–¢–û–í!</b> üìä

–ü—Ä–æ–¥–∞–∂ - {result.rows_used}
–î–æ—Ö–æ–¥ - ${result.total_revenue_usd:.2f}
–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ - ${result.avg_revenue_per_sale:.4f}
% –ø–æ—Ä—Ç—Ñ–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–ª—Å—è –∑–∞ –º–µ—Å—è—Ü - {result.portfolio_sold_percent:.2f}%
–¥–æ–ª—è –ø—Ä–æ–¥–∞–∂ –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç - {result.new_works_sales_percent:.2f}%


===============================
üìù <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π</b>
===============================
<b>% –ø–æ—Ä—Ç—Ñ–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–ª—Å—è –∑–∞ –º–µ—Å—è—Ü - {result.portfolio_sold_percent:.2f}%</b>

–≠—Ç–∞ –º–µ—Ç—Ä–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∞—è –¥–æ–ª—è —Ç–≤–æ–µ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏. –≠—Ç–æ –Ω–∞–≥–ª—è–¥–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –Ω–∞—Å–∫–æ–ª—å–∫–æ ¬´–∂–∏–≤–æ–π¬ª —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∫–∞–∫ –æ–Ω —Ö–æ—Ä–æ—à–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ.

<b>–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç —Ç–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:</b>
{sold_portfolio_text}


===============================
<b>–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - {result.new_works_sales_percent:.2f}%</b>

–≠—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–≤–æ–∏—Ö –ø—Ä–æ–¥–∞–∂ –ø—Ä–∏—à—ë–ª—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã, –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞.
–ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è, –æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –∑–∞—Ö–æ–¥–∏—Ç —Ç–≤–æ–π —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Äî –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –¥–≤–∏–∂–µ—à—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.

<b>–û —á–µ–º –≥–æ–≤–æ—Ä—è—Ç —Ç–≤–æ–∏ —Ü–∏—Ñ—Ä—ã?</b>
{new_works_text}


===============================
<b>% –ª–∏–º–∏—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å - {result.upload_limit_usage:.0f}%</b>

–≠—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–≤–æ–µ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∞–¥–æ–±–µ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å.

<b>–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç —ç—Ç–∞ —Ü–∏—Ñ—Ä–∞?</b>
{upload_limit_text}

–≠—Ç–æ –±—ã–ª –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ç–≤–æ–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞–≥—Ä—É–∑–∏ –Ω–æ–≤—ã–π CSV-—Ñ–∞–π–ª.

<b>–í–ê–ñ–ù–û!</b>
–í—Å–µ –æ—Ç—á–µ—Ç—ã –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –∑–∞–π—Ç–∏ —Å—é–¥–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö."""
        
        # Clean HTML for Telegram compatibility
        return safe_format_for_telegram(combined_report, use_markdown=False)

    def _get_sold_portfolio_recommendation(self, sold_percent: float) -> str:
        """Get recommendation text for sold portfolio percentage based on FSM data.
        
        Args:
            sold_percent: Percentage of portfolio that sold (0-100)
            
        Returns:
            Formatted recommendation text from lexicon
        """
        if sold_percent < 1:
            return safe_format_for_telegram(LEXICON_RU.get('sold_portfolio_0_1_newbie', "–ù–∏–∑–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å"))
        elif 1 <= sold_percent < 2:
            return safe_format_for_telegram(LEXICON_RU.get('sold_portfolio_1_2', "–ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"))
        elif 2 <= sold_percent < 3:
            return safe_format_for_telegram(LEXICON_RU.get('sold_portfolio_2_3', "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"))
        elif 3 <= sold_percent < 5:
            return safe_format_for_telegram(LEXICON_RU.get('sold_portfolio_3_5', "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"))
        else:
            return safe_format_for_telegram(LEXICON_RU.get('sold_portfolio_5_plus', "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"))
    
    def generate_top_themes_report(self, result: AdvancedProcessResult, subscription_type: str) -> str:
        """Generate top themes report."""
        
        period_text = result.period_human_ru
        
        if result.top10_by_revenue.empty:
            return f"""üèÜ <b>–¢–û–ü –¢–ï–ú –ü–û –ü–†–û–î–ê–ñ–ê–ú –ò –î–û–•–û–î–£</b>

–ê–Ω–∞–ª–∏–∑ –∑–∞ {period_text}:
–¢–æ–ø —Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

‚ùóÔ∏è –í—Å–µ —Ç–æ–ø-—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –¢—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–µ—à—å –∑–∞–π—Ç–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö.

üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ç–µ–º—ã –≤ —Å–≤–æ–∏—Ö –±—É–¥—É—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Ö –∏ —Å—ä–µ–º–∫–∞—Ö ‚Äî –æ–Ω–∏ —É–∂–µ –¥–æ–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –Ω–∏—Ö –µ—â–µ –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç."""
        
        # Determine how many themes to show
        if subscription_type == "PRO":
            themes_to_show = min(5, len(result.top10_by_revenue))
            themes_text = "<b>–¢–æ–ø-5 —Ç–µ–º:</b>"
        else:  # ULTRA
            themes_to_show = min(10, len(result.top10_by_revenue))
            themes_text = "<b>–¢–æ–ø-10 —Ç–µ–º:</b>"
        
        # Format themes
        themes_list = []
        for i, (_, row) in enumerate(result.top10_by_revenue.head(themes_to_show).iterrows(), 1):
            themes_list.append(
                f"{i}. {row['asset_title']} ‚Äî {int(row['total_sales'])} –ø—Ä–æ–¥–∞–∂/{float(row['total_revenue']):.2f}$"
            )
        
        return f"""üèÜ <b>–¢–û–ü –¢–ï–ú –ü–û –ü–†–û–î–ê–ñ–ê–ú –ò –î–û–•–û–î–£</b>

–ê–Ω–∞–ª–∏–∑ –∑–∞ {period_text}:

{themes_text}
{chr(10).join(themes_list)}

‚ùóÔ∏è –í—Å–µ —Ç–æ–ø-—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –¢—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–µ—à—å –∑–∞–π—Ç–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö.

üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ç–µ–º—ã –≤ —Å–≤–æ–∏—Ö –±—É–¥—É—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—è—Ö –∏ —Å—ä–µ–º–∫–∞—Ö ‚Äî –æ–Ω–∏ —É–∂–µ –¥–æ–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –Ω–∏—Ö –µ—â–µ –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç."""

