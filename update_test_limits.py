"""Update test user limits for demo purposes."""

import os
import sys
from datetime import datetime

# Set environment variables for MVP
os.environ["DATABASE_URL"] = "sqlite:///iqstocker.db"
os.environ["REDIS_URL"] = "redis://localhost:6379/0"
os.environ["ADMIN_SECRET_KEY"] = "test_secret_key_123"
os.environ["ADMIN_PASSWORD"] = "admin123"

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.database import SessionLocal
from database.models import User, SubscriptionType, Limits

def update_test_limits():
    """Update test user limits for demo."""
    
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("=" * 50)
    
    db = SessionLocal()
    try:
        # Find test user
        user = db.query(User).filter(User.telegram_id == 12345).first()
        
        if not user:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        print(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} ({user.telegram_id})")
        print(f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {user.subscription_type.value}")
        
        # Update user to TEST_PRO for demo
        user.subscription_type = SubscriptionType.TEST_PRO
        user.test_pro_started_at = datetime.utcnow()
        
        # Get or create limits
        limits = db.query(Limits).filter(Limits.user_id == user.id).first()
        
        if not limits:
            limits = Limits(user_id=user.id)
            db.add(limits)
        
        # Set demo limits (more generous for testing)
        limits.analytics_total = 5  # 5 –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        limits.analytics_used = 0
        limits.themes_total = 10   # 10 —Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        limits.themes_used = 0
        limits.top_themes_total = 10  # 10 —Ç–æ–ø-—Ç–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        limits.top_themes_used = 0
        
        db.commit()
        
        print("‚úÖ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        print(f"  - –ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ: {limits.analytics_total}")
        print(f"  - –¢–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ: {limits.themes_total}")
        print(f"  - –¢–æ–ø-—Ç–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ: {limits.top_themes_total}")
        print(f"  - –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {user.subscription_type.value}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")
        db.rollback()
    finally:
        db.close()

def show_current_limits():
    """Show current user limits."""
    
    print("\nüìä –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 50)
    
    db = SessionLocal()
    try:
        users = db.query(User).all()
        
        for user in users:
            limits = db.query(Limits).filter(Limits.user_id == user.id).first()
            
            print(f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} ({user.telegram_id})")
            print(f"–ü–æ–¥–ø–∏—Å–∫–∞: {user.subscription_type.value}")
            
            if limits:
                print(f"  –ê–Ω–∞–ª–∏—Ç–∏–∫: {limits.analytics_used}/{limits.analytics_total}")
                print(f"  –¢–µ–º: {limits.themes_used}/{limits.themes_total}")
                print(f"  –¢–æ–ø-—Ç–µ–º: {limits.top_themes_used}/{limits.top_themes_total}")
            else:
                print("  –õ–∏–º–∏—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    finally:
        db.close()

if __name__ == "__main__":
    update_test_limits()
    show_current_limits()
    
    print("\n" + "=" * 50)
    print("üéâ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
    print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
    print("=" * 50)
