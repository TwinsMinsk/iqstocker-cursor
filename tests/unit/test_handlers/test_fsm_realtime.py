#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã FSM –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.
"""

import logging
import sys
import os
import asyncio
import time

import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.lexicon import LEXICON_RU
from bot.states.analytics import AnalyticsStates

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)


@pytest.mark.skip(reason="FSM states refactored")
def test_fsm_flow_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è FSM –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üß™ –°–∏–º—É–ª—è—Ü–∏—è FSM –ø–æ—Ç–æ–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states = [
        ("waiting_for_portfolio_size", "100", "–†–∞–∑–º–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è: 100 —Ñ–∞–π–ª–æ–≤"),
        ("waiting_for_upload_limit", "50", "–õ–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∏: 50 —Ñ–∞–π–ª–æ–≤ –≤ –º–µ—Å—è—Ü"),
        ("waiting_for_monthly_uploads", "30", "–û–±—ã—á–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é: 30 —Ñ–∞–π–ª–æ–≤ –≤ –º–µ—Å—è—Ü"),
        ("waiting_for_acceptance_rate", "25.5", "–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è: 25.5%"),
        ("waiting_for_content_type", "AI", "–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: AI")
    ]
    
    logger.info("üìã –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
    for i, (state, input_value, description) in enumerate(user_states, 1):
        logger.info(f"  {i}. {state}")
        logger.info(f"     –í–≤–æ–¥: '{input_value}' - {description}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        if state == "waiting_for_portfolio_size":
            try:
                portfolio_size = int(input_value)
                if portfolio_size <= 0:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {portfolio_size} <= 0")
                    return False
                logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: portfolio_size = {portfolio_size}")
            except ValueError:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: '{input_value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
                return False
                
        elif state == "waiting_for_upload_limit":
            try:
                upload_limit = int(input_value)
                if upload_limit <= 0:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {upload_limit} <= 0")
                    return False
                logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: upload_limit = {upload_limit}")
            except ValueError:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: '{input_value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
                return False
                
        elif state == "waiting_for_monthly_uploads":
            try:
                monthly_uploads = int(input_value)
                if monthly_uploads < 0:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {monthly_uploads} < 0")
                    return False
                logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: monthly_uploads = {monthly_uploads}")
            except ValueError:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: '{input_value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
                return False
                
        elif state == "waiting_for_acceptance_rate":
            try:
                acceptance_rate = float(input_value)
                if acceptance_rate < 0 or acceptance_rate > 100:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {acceptance_rate} –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100")
                    return False
                logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞: acceptance_rate = {acceptance_rate}")
            except ValueError:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: '{input_value}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
                return False
                
        elif state == "waiting_for_content_type":
            content_type = input_value.strip().upper()
            content_type_mapping = {
                'AI': 'AI',
                '–§–û–¢–û': 'PHOTO',
                'PHOTO': 'PHOTO',
                '–ò–õ–õ–Æ–°–¢–†–ê–¶–ò–ò': 'ILLUSTRATION',
                'ILLUSTRATION': 'ILLUSTRATION',
                '–í–ò–î–ï–û': 'VIDEO',
                'VIDEO': 'VIDEO',
                '–í–ï–ö–¢–û–†': 'VECTOR',
                'VECTOR': 'VECTOR'
            }
            mapped_type = content_type_mapping.get(content_type, 'PHOTO')
            logger.info(f"‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–π–¥–µ–Ω: '{input_value}' -> '{mapped_type}'")
    
    logger.info("‚úÖ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_error_scenarios():
    """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –æ—à–∏–±–∫–∞–º–∏."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å –æ—à–∏–±–∫–∞–º–∏...")
    
    error_cases = [
        ("waiting_for_portfolio_size", "abc", "–ù–µ—á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥"),
        ("waiting_for_portfolio_size", "-5", "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"),
        ("waiting_for_portfolio_size", "0", "–ù–æ–ª—å"),
        ("waiting_for_upload_limit", "xyz", "–ù–µ—á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥"),
        ("waiting_for_upload_limit", "-10", "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"),
        ("waiting_for_monthly_uploads", "test", "–ù–µ—á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥"),
        ("waiting_for_acceptance_rate", "150", "–ë–æ–ª—å—à–µ 100%"),
        ("waiting_for_acceptance_rate", "-5", "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç"),
        ("waiting_for_acceptance_rate", "invalid", "–ù–µ—á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥")
    ]
    
    for state, input_value, description in error_cases:
        logger.info(f"üìã –¢–µ—Å—Ç –æ—à–∏–±–∫–∏: {state} —Å –≤–≤–æ–¥–æ–º '{input_value}' ({description})")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        is_error = False
        
        if state in ["waiting_for_portfolio_size", "waiting_for_upload_limit", "waiting_for_monthly_uploads"]:
            try:
                value = int(input_value)
                if state == "waiting_for_portfolio_size" and value <= 0:
                    is_error = True
                elif state == "waiting_for_upload_limit" and value <= 0:
                    is_error = True
                elif state == "waiting_for_monthly_uploads" and value < 0:
                    is_error = True
            except ValueError:
                is_error = True
                
        elif state == "waiting_for_acceptance_rate":
            try:
                value = float(input_value)
                if value < 0 or value > 100:
                    is_error = True
            except ValueError:
                is_error = True
        
        if is_error:
            logger.info(f"‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: '{input_value}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {state}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: '{input_value}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {state}")
            return False
    
    logger.info("‚úÖ –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True


def test_lexicon_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å lexicon."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å lexicon...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è FSM
    fsm_texts = [
        'csv_upload_info_start',
        'ask_portfolio_size',
        'ask_monthly_limit',
        'ask_monthly_uploads',
        'ask_profit_percentage',
        'ask_content_type',
        'csv_processing',
        'csv_ready'
    ]
    
    for text_key in fsm_texts:
        if text_key not in LEXICON_RU:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç: {text_key}")
            return False
        
        text = LEXICON_RU[text_key]
        if not text or len(text.strip()) == 0:
            logger.error(f"‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç: {text_key}")
            return False
        
        logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω: {text_key} ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    logger.info("‚úÖ –í—Å–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ lexicon –¥–æ—Å—Ç—É–ø–Ω—ã!")
    return True


@pytest.mark.skip(reason="FSM states refactored")
def test_cancel_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /cancel...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    states = [
        AnalyticsStates.waiting_for_portfolio_size,
        AnalyticsStates.waiting_for_upload_limit,
        AnalyticsStates.waiting_for_monthly_uploads,
        AnalyticsStates.waiting_for_acceptance_rate,
        AnalyticsStates.waiting_for_content_type
    ]
    
    for state in states:
        logger.info(f"üìã –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {state}")
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã –≤—ã–∑—ã–≤–∞–ª—Å—è cancel_handler
        logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /cancel –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {state}")
    
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /cancel —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö!")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ FSM –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
    
    tests = [
        ("FSM Flow Simulation", test_fsm_flow_simulation),
        ("Error Scenarios", test_error_scenarios),
        ("Lexicon Integration", test_lexicon_integration),
        ("Cancel Command", test_cancel_command)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if test_func():
                passed += 1
                logger.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã FSM –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("\nü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
        logger.info("üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram:")
        logger.info("   1. –û—Ç–ø—Ä–∞–≤—å /start")
        logger.info("   2. –ù–∞–∂–º–∏ 'üìä –°–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É'")
        logger.info("   3. –ó–∞–≥—Ä—É–∑–∏ CSV —Ñ–∞–π–ª")
        logger.info("   4. –ü—Ä–æ–π–¥–∏ –ø–æ—à–∞–≥–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        logger.info("   5. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–º–∞–Ω–¥—É /cancel –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã FSM –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
