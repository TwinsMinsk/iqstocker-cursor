#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ FSM.
"""

import logging
import sys
import os

import pytest

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.lexicon import LEXICON_RU
from bot.states.analytics import AnalyticsStates
from database.models import User, SubscriptionType, Limits
from config.database import SessionLocal

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)


def test_lexicon_keys():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –≤ lexicon."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ lexicon –¥–ª—è FSM...")
    
    required_keys = [
        'csv_upload_info_start',
        'ask_portfolio_size',
        'ask_monthly_limit', 
        'ask_monthly_uploads',
        'ask_profit_percentage',
        'ask_content_type',
        'csv_processing',
        'csv_ready'
    ]
    
    missing_keys = []
    for key in required_keys:
        if key not in LEXICON_RU:
            missing_keys.append(key)
    
    if missing_keys:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ lexicon: {missing_keys}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ lexicon –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def test_fsm_states():
    """–¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM...")
    
    expected_states = [
        'waiting_for_portfolio_size',
        'waiting_for_upload_limit', 
        'waiting_for_monthly_uploads',
        'waiting_for_acceptance_rate',
        'waiting_for_content_type'
    ]
    
    actual_states = []
    for attr_name in dir(AnalyticsStates):
        if not attr_name.startswith('_'):
            actual_states.append(attr_name)
    
    missing_states = []
    for state in expected_states:
        if state not in actual_states:
            missing_states.append(state)
    
    if missing_states:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM: {missing_states}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def test_validation_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ portfolio_size
    test_cases = [
        ("100", True, "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"),
        ("0", False, "–ù–æ–ª—å"),
        ("-5", False, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"),
        ("abc", False, "–ù–µ —á–∏—Å–ª–æ"),
        ("", False, "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
    ]
    
    for value, expected_valid, description in test_cases:
        try:
            portfolio_size = int(value)
            is_valid = portfolio_size > 0
            if is_valid != expected_valid:
                logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è portfolio_size –Ω–µ–≤–µ—Ä–Ω–∞ –¥–ª—è '{value}' ({description})")
                return False
        except ValueError:
            if expected_valid:
                logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è portfolio_size –Ω–µ–≤–µ—Ä–Ω–∞ –¥–ª—è '{value}' ({description})")
                return False
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ profit_margin
    test_cases = [
        ("25.5", True, "–í–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç"),
        ("0", True, "–ù–æ–ª—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"),
        ("100", True, "100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"),
        ("-5", False, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç"),
        ("150", False, "–ë–æ–ª—å—à–µ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"),
        ("abc", False, "–ù–µ —á–∏—Å–ª–æ")
    ]
    
    for value, expected_valid, description in test_cases:
        try:
            profit_margin = float(value)
            is_valid = 0 <= profit_margin <= 100
            if is_valid != expected_valid:
                logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è profit_margin –Ω–µ–≤–µ—Ä–Ω–∞ –¥–ª—è '{value}' ({description})")
                return False
        except ValueError:
            if expected_valid:
                logger.error(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è profit_margin –Ω–µ–≤–µ—Ä–Ω–∞ –¥–ª—è '{value}' ({description})")
                return False
    
    logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_content_type_mapping():
    """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    content_type_mapping = {
        'AI': 'AI',
        '–§–û–¢–û': 'PHOTO',
        'PHOTO': 'PHOTO',
        '–ò–õ–õ–Æ–°–¢–†–ê–¶–ò–ò': 'ILLUSTRATION',
        'ILLUSTRATION': 'ILLUSTRATION',
        '–í–ò–î–ï–û': 'VIDEO',
        'VIDEO': 'VIDEO',
        '–í–ï–ö–¢–û–†': 'VECTOR',
        'VECTOR': 'VECTOR'
    }
    
    test_cases = [
        ("AI", "AI"),
        ("—Ñ–æ—Ç–æ", "PHOTO"),
        ("PHOTO", "PHOTO"),
        ("–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏", "ILLUSTRATION"),
        ("ILLUSTRATION", "ILLUSTRATION"),
        ("–≤–∏–¥–µ–æ", "VIDEO"),
        ("VIDEO", "VIDEO"),
        ("–≤–µ–∫—Ç–æ—Ä", "VECTOR"),
        ("VECTOR", "VECTOR"),
        ("unknown", "PHOTO"),  # Default
        ("", "PHOTO")  # Default
    ]
    
    for input_type, expected_output in test_cases:
        content_type = input_type.strip().upper()
        result = content_type_mapping.get(content_type, 'PHOTO')
        if result != expected_output:
            logger.error(f"‚ùå –ú–∞–ø–ø–∏–Ω–≥ –Ω–µ–≤–µ—Ä–µ–Ω –¥–ª—è '{input_type}': –æ–∂–∏–¥–∞–ª—Å—è '{expected_output}', –ø–æ–ª—É—á–µ–Ω '{result}'")
            return False
    
    logger.info("‚úÖ –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def test_database_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ë–î...")
    
    try:
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(
            telegram_id=999999999,
            username="test_fsm_user",
            first_name="Test",
            subscription_type=SubscriptionType.TEST_PRO
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ª–∏–º–∏—Ç—ã
        test_limits = Limits(
            user_id=1,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            analytics_total=1,
            analytics_used=0,
            themes_total=5,
            themes_used=0,
            top_themes_total=1,
            top_themes_used=0
        )
        
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î: {e}")
        return False
    finally:
        if 'db' in locals():
            db.close()


@pytest.mark.skip(reason="FSM states refactored")
def test_flow_sequence():
    """–¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ FSM."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å FSM...")
    
    expected_flow = [
        AnalyticsStates.waiting_for_portfolio_size,
        AnalyticsStates.waiting_for_upload_limit,
        AnalyticsStates.waiting_for_monthly_uploads,
        AnalyticsStates.waiting_for_acceptance_rate,
        AnalyticsStates.waiting_for_content_type
    ]
    
    logger.info(f"üìã –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(expected_flow)} —à–∞–≥–æ–≤")
    for i, state in enumerate(expected_flow, 1):
        logger.info(f"  {i}. {state}")
    
    logger.info("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å FSM –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ FSM —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    tests = [
        ("Lexicon Keys", test_lexicon_keys),
        ("FSM States", test_fsm_states),
        ("Validation Logic", test_validation_logic),
        ("Content Type Mapping", test_content_type_mapping),
        ("Database Integration", test_database_integration),
        ("Flow Sequence", test_flow_sequence)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if test_func():
                passed += 1
                logger.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã FSM –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã FSM –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
