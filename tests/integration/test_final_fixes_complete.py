#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Markdown —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è.
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = Path("local.env")
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

def test_all_handlers_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from bot.handlers import start, analytics, themes, top_themes, lessons, calendar, channel, faq, profile
        print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        from bot.utils.markdown import escape_markdown, escape_markdown_preserve_formatting
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_start_handler_specific():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ start.py."""
    
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º start.py...")
    
    try:
        from bot.handlers.start import start_command
        from bot.utils.markdown import escape_markdown
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_names = ["–¢–µ—Å—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ç–µ—Å—Ç", None]
        
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for i, name in enumerate(test_names, 1):
            safe_name = name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            escaped_name = escape_markdown(safe_name)
            print(f"   {i}. {name} -> {safe_name} -> {escaped_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è start.py: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_lessons_handler_specific():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ lessons.py."""
    
    print("\nüé• –¢–µ—Å—Ç–∏—Ä—É–µ–º lessons.py...")
    
    try:
        from bot.handlers.lessons import lessons_callback
        from bot.utils.markdown import escape_markdown
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–∫–æ–≤
        test_lesson_titles = [
            "–£—Ä–æ–∫ 1. –û—Å–Ω–æ–≤—ã!",
            "–£—Ä–æ–∫ 2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏.",
            "–£—Ä–æ–∫ 3. –°–µ–∫—Ä–µ—Ç—ã (–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞)",
            "–£—Ä–æ–∫ 4. –§–∏–Ω–∞–ª—å–Ω—ã–π + –±–æ–Ω—É—Å"
        ]
        
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–∫–æ–≤:")
        for i, title in enumerate(test_lesson_titles, 1):
            escaped = escape_markdown(title)
            print(f"   {i}. {title} -> {escaped}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
        test_numbers = [1, 5, 10, 100]
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª:")
        for i, num in enumerate(test_numbers, 1):
            escaped = escape_markdown(str(num))
            print(f"   {i}. {num} -> {escaped}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è lessons.py: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_problematic_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –ª–æ–≥–æ–≤."""
    
    print("\nüö® –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –ª–æ–≥–æ–≤...")
    
    try:
        from bot.utils.markdown import escape_markdown
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏ –∏–∑ –ª–æ–≥–æ–≤
        problematic_cases = [
            "Character '!' is reserved and must be escaped",
            "Character '.' is reserved and must be escaped",
            "Character '+' is reserved and must be escaped",
            "Character '-' is reserved and must be escaped",
            "Character '(' is reserved and must be escaped",
            "Character ')' is reserved and must be escaped",
            "Character '*' is reserved and must be escaped",
            "Character '_' is reserved and must be escaped",
            "Character '[' is reserved and must be escaped",
            "Character ']' is reserved and must be escaped",
            "Character '`' is reserved and must be escaped"
        ]
        
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏:")
        
        all_passed = True
        for i, case in enumerate(problematic_cases, 1):
            escaped = escape_markdown(case)
            print(f"   {i:2d}. {case} -> {escaped}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
            if '!' in case and '\\!' not in escaped:
                print(f"       ‚ùå –í–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
                all_passed = False
            if '.' in case and '\\.' not in escaped:
                print(f"       ‚ùå –¢–æ—á–∫–∞ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!")
                all_passed = False
            if '+' in case and '\\+' not in escaped:
                print(f"       ‚ùå –ü–ª—é—Å –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω!")
                all_passed = False
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
        import traceback
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üöÄ –¢–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Markdown —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    success1 = test_all_handlers_import()
    
    # –¢–µ—Å—Ç 2: start.py
    success2 = test_start_handler_specific()
    
    # –¢–µ—Å—Ç 3: lessons.py
    success3 = test_lessons_handler_specific()
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
    success4 = test_problematic_cases()
    
    print("\n" + "=" * 70)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"ü§ñ –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {'‚úÖ OK' if success1 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"üöÄ start.py: {'‚úÖ OK' if success2 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"üé• lessons.py: {'‚úÖ OK' if success3 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏: {'‚úÖ OK' if success4 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    
    if success1 and success2 and success3 and success4:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üí° –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.")
        print("üí° start.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω.")
        print("üí° lessons.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω.")
        print("üí° –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –ª–æ–≥–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        print("üí° –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ Markdown.")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")

if __name__ == "__main__":
    main()
