#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
"""

import logging
import sys
import os
import asyncio
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.lexicon import LEXICON_RU
from bot.lexicon.lexicon_ru import LEXICON_COMMANDS_RU
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.keyboards.common import add_back_to_menu_button, create_subscription_buttons, create_themes_keyboard
from bot.keyboards.profile import get_profile_keyboard
from database.models import SubscriptionType

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)


def test_lexicon_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å lexicon."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å lexicon...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    main_texts = [
        'start_message_1', 'start_message_2', 'start_message_3', 'bot_description',
        'main_menu_title', 'csv_upload_prompt', 'csv_upload_info_start',
        'ask_portfolio_size', 'ask_monthly_limit', 'ask_monthly_uploads',
        'ask_profit_percentage', 'ask_content_type', 'csv_processing', 'csv_ready'
    ]
    
    for text_key in main_texts:
        if text_key not in LEXICON_RU:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç: {text_key}")
            return False
    
    logger.info(f"‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(main_texts)} —Ç–µ–∫—Å—Ç–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    if not LEXICON_COMMANDS_RU:
        logger.error("‚ùå –°–ª–æ–≤–∞—Ä—å LEXICON_COMMANDS_RU –ø—É—Å—Ç")
        return False
    
    logger.info(f"‚úÖ –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ({len(LEXICON_COMMANDS_RU)} –∫–æ–º–∞–Ω–¥)")
    return True


def test_keyboard_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
        for sub_type in [SubscriptionType.FREE, SubscriptionType.PRO, SubscriptionType.ULTRA, SubscriptionType.TEST_PRO]:
            keyboard = get_main_menu_keyboard(sub_type)
            if not keyboard or not keyboard.inline_keyboard:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è {sub_type}")
                return False
            logger.info(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è {sub_type} ({len(keyboard.inline_keyboard)} —Ä—è–¥–æ–≤)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_keyboard = get_profile_keyboard(SubscriptionType.FREE)
        if not profile_keyboard or not profile_keyboard.inline_keyboard:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è")
            return False
        logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–Ω–∞ ({len(profile_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        test_keyboard = []
        test_keyboard = add_back_to_menu_button(test_keyboard, SubscriptionType.FREE)
        if not test_keyboard:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'")
            return False
        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        subscription_buttons = create_subscription_buttons(SubscriptionType.FREE)
        if not subscription_buttons:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏")
            return False
        logger.info(f"‚úÖ –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã ({len(subscription_buttons)} –∫–Ω–æ–ø–æ–∫)")
        
        themes_keyboard = create_themes_keyboard(SubscriptionType.FREE, True)
        if not themes_keyboard or not themes_keyboard.inline_keyboard:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–º")
            return False
        logger.info(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–º —Å–æ–∑–¥–∞–Ω–∞ ({len(themes_keyboard.inline_keyboard)} —Ä—è–¥–æ–≤)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False


def test_button_texts():
    """–¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
        main_menu = get_main_menu_keyboard(SubscriptionType.FREE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤–∑—è—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        for row in main_menu.inline_keyboard:
            for button in row:
                button_text = button.text
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä–µ
                if button_text not in LEXICON_COMMANDS_RU.values():
                    logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ '{button_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ LEXICON_COMMANDS_RU")
                else:
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ '{button_text}' –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ")
        
        logger.info("‚úÖ –í—Å–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫: {e}")
        return False


def test_subscription_buttons():
    """–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    try:
        subscription_types = [
            (SubscriptionType.FREE, "FREE"),
            (SubscriptionType.PRO, "PRO"),
            (SubscriptionType.ULTRA, "ULTRA"),
            (SubscriptionType.TEST_PRO, "TEST_PRO")
        ]
        
        for sub_type, name in subscription_types:
            buttons = create_subscription_buttons(sub_type)
            logger.info(f"üìã {name}: {len(buttons)} –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            for button_row in buttons:
                for button in button_row:
                    if button.text not in LEXICON_COMMANDS_RU.values():
                        logger.warning(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '{button.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ")
        
        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


def test_fsm_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å FSM."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å FSM...")
    
    try:
        from bot.states.analytics import AnalyticsStates
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        states = [
            AnalyticsStates.waiting_for_portfolio_size,
            AnalyticsStates.waiting_for_upload_limit,
            AnalyticsStates.waiting_for_monthly_uploads,
            AnalyticsStates.waiting_for_profit_margin,
            AnalyticsStates.waiting_for_content_type
        ]
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è FSM
        fsm_texts = [
            'csv_upload_info_start',
            'ask_portfolio_size',
            'ask_monthly_limit',
            'ask_monthly_uploads',
            'ask_profit_percentage',
            'ask_content_type',
            'csv_processing',
            'csv_ready'
        ]
        
        for text_key in fsm_texts:
            if text_key not in LEXICON_RU:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç FSM —Ç–µ–∫—Å—Ç: {text_key}")
                return False
        
        logger.info("‚úÖ FSM —Ç–µ–∫—Å—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FSM —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FSM: {e}")
        return False


def test_horizontal_navigation():
    """–¢–µ—Å—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é...")
    
    try:
        from bot.utils.safe_edit import safe_edit_message, safe_delete_message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ç–∏–ª–∏—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        logger.info("‚úÖ –£—Ç–∏–ª–∏—Ç—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_texts = [
            'main_menu_title',
            'analytics_unavailable_free',
            'themes_and_trends_free',
            'top_themes_unavailable_free',
            'stocker_calendar_free',
            'stocker_calendar_pro_ultra'
        ]
        
        for text_key in navigation_texts:
            if text_key not in LEXICON_RU:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {text_key}")
        
        logger.info("‚úÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
        return False


def test_database_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ë–î...")
    
    try:
        from config.database import SessionLocal
        from database.models import User, SubscriptionType, Limits
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        test_user = User(
            telegram_id=999999999,
            username="test_user",
            first_name="Test",
            subscription_type=SubscriptionType.FREE
        )
        
        test_limits = Limits(
            user_id=1,
            analytics_total=0,
            analytics_used=0,
            themes_total=1,
            themes_used=0,
            top_themes_total=0,
            top_themes_used=0
        )
        
        db.close()
        
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞...")
    
    tests = [
        ("Lexicon Integration", test_lexicon_integration),
        ("Keyboard Creation", test_keyboard_creation),
        ("Button Texts", test_button_texts),
        ("Subscription Buttons", test_subscription_buttons),
        ("FSM Integration", test_fsm_integration),
        ("Horizontal Navigation", test_horizontal_navigation),
        ("Database Integration", test_database_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if test_func():
                passed += 1
                logger.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("\nü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
        logger.info("üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram:")
        logger.info("   1. –û—Ç–ø—Ä–∞–≤—å /start - –ø—Ä–æ–≤–µ—Ä—å –ø–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
        logger.info("   2. –ù–∞–∂–º–∏ 'üìä –°–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É' - –ø—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ CSV")
        logger.info("   3. –ó–∞–≥—Ä—É–∑–∏ CSV —Ñ–∞–π–ª - –ø—Ä–æ–≤–µ—Ä—å FSM –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        logger.info("   4. –ü—Ä–æ–π–¥–∏ –ø–æ—à–∞–≥–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (5 —à–∞–≥–æ–≤)")
        logger.info("   5. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–º–∞–Ω–¥—É /cancel –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ")
        logger.info("   6. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        logger.info("   7. –ü—Ä–æ–≤–µ—Ä—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π)")
        logger.info("   8. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
