"""Test fixed reports."""

import os
import sys

# Set environment variables for MVP
os.environ["DATABASE_URL"] = "sqlite:///iqstocker.db"
os.environ["REDIS_URL"] = "redis://localhost:6379/0"
os.environ["ADMIN_SECRET_KEY"] = "test_secret_key_123"
os.environ["ADMIN_PASSWORD"] = "admin123"

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.analytics.advanced_csv_processor import AdvancedCSVProcessor
from core.analytics.report_generator_fixed import FixedReportGenerator

def test_fixed_reports():
    """Test fixed reports."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
    print("=" * 50)
    
    # Test with advanced CSV
    if os.path.exists('advanced_test_portfolio.csv'):
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º CSV —Ñ–∞–π–ª–æ–º...")
        
        try:
            processor = AdvancedCSVProcessor()
            result = processor.process_csv(
                csv_path='advanced_test_portfolio.csv',
                portfolio_size=100,
                upload_limit=500,
                monthly_uploads=250,
                acceptance_rate=55.0
            )
            
            print("‚úÖ CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ü–µ—Ä–∏–æ–¥: {result.period_human_ru}")
            print(f"üí∞ –ü—Ä–æ–¥–∞–∂: {result.rows_used}")
            print(f"üíµ –î–æ—Ö–æ–¥: ${result.total_revenue_usd}")
            print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤: {result.unique_assets_sold}")
            print(f"üìà % –ø–æ—Ä—Ç—Ñ–µ–ª—è: {result.portfolio_sold_percent}%")
            print(f"üÜï –î–æ–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç: {result.new_works_sales_percent}%")
            
            # Generate monthly report
            report_generator = FixedReportGenerator()
            monthly_report = report_generator.generate_monthly_report(result)
            
            print("\nüìã –ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢:")
            print("-" * 50)
            print(monthly_report)
            
            # Generate top themes report
            top_themes_report = report_generator.generate_top_themes_report(result, "ULTRA")
            
            print("\nüèÜ –û–¢–ß–ï–¢ –¢–û–ü –¢–ï–ú:")
            print("-" * 50)
            print(top_themes_report)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    
    # Test with simple CSV
    if os.path.exists('simple_test_portfolio.csv'):
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º CSV —Ñ–∞–π–ª–æ–º...")
        
        try:
            processor = AdvancedCSVProcessor()
            result = processor.process_csv(
                csv_path='simple_test_portfolio.csv',
                portfolio_size=100,
                upload_limit=500,
                monthly_uploads=250,
                acceptance_rate=55.0
            )
            
            print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ü–µ—Ä–∏–æ–¥: {result.period_human_ru}")
            print(f"üí∞ –ü—Ä–æ–¥–∞–∂: {result.rows_used}")
            print(f"üíµ –î–æ—Ö–æ–¥: ${result.total_revenue_usd}")
            
            # Generate monthly report
            report_generator = FixedReportGenerator()
            monthly_report = report_generator.generate_monthly_report(result)
            
            print("\nüìã –ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢:")
            print("-" * 50)
            print(monthly_report)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    test_fixed_reports()
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("–¢–µ–ø–µ—Ä—å –æ—Ç—á–µ—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    print("=" * 50)

