#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –≤ start.py.
"""

import os
import sys
from pathlib import Path
from datetime import datetime, timezone, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = Path("local.env")
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

def test_start_handler_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç start.py."""
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç start.py...")
    
    try:
        from bot.handlers.start import start_command
        print("‚úÖ start.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_escape_markdown_with_variables():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏."""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏...")
    
    try:
        from bot.utils.markdown import escape_markdown
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        test_date = datetime.now().strftime('%d.%m.%Y')
        escaped_date = escape_markdown(test_date)
        print(f"üìÖ –î–∞—Ç–∞: {test_date} -> {escaped_date}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_name = "–¢–µ—Å—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        escaped_name = escape_markdown(test_name)
        print(f"üë§ –ò–º—è: {test_name} -> {escaped_name}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        test_status = "–ê–∫—Ç–∏–≤–µ–Ω!"
        escaped_status = escape_markdown(test_status)
        print(f"üìä –°—Ç–∞—Ç—É—Å: {test_status} -> {escaped_status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º f-—Å—Ç—Ä–æ–∫—É —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        test_message = f"–ü—Ä–∏–≤–µ—Ç, {escaped_name}! –°—Ç–∞—Ç—É—Å: {escaped_status}"
        final_message = escape_markdown(test_message)
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {final_message}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_problematic_characters():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."""
    
    print("\nüö® –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã...")
    
    try:
        from bot.utils.markdown import escape_markdown
        
        problematic_texts = [
            "–¢–µ—Å—Ç —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º!",
            "–¢–µ—Å—Ç —Å —Ç–æ—á–∫–æ–π.",
            "–¢–µ—Å—Ç —Å –¥–µ—Ñ–∏—Å–æ–º - —Ç–µ–∫—Å—Ç",
            "–¢–µ—Å—Ç —Å —Å–∫–æ–±–∫–∞–º–∏ (—Ç–µ–∫—Å—Ç)",
            "–¢–µ—Å—Ç —Å –ø–ª—é—Å–æ–º + —Ç–µ–∫—Å—Ç",
            "–¢–µ—Å—Ç —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º _—Ç–µ–∫—Å—Ç–æ–º_",
            "–¢–µ—Å—Ç —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ [—Ç–µ–∫—Å—Ç]",
            "–¢–µ—Å—Ç —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏ `—Ç–µ–∫—Å—Ç`",
            "–¢–µ—Å—Ç —Å –∑–≤–µ–∑–¥–æ—á–∫–æ–π *—Ç–µ–∫—Å—Ç–æ–º*",
            "–¢–µ—Å—Ç —Å –∂–∏—Ä–Ω—ã–º **—Ç–µ–∫—Å—Ç–æ–º**"
        ]
        
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã:")
        
        for i, text in enumerate(problematic_texts, 1):
            escaped = escape_markdown(text)
            print(f"   {i:2d}. {text} -> {escaped}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üöÄ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç start.py
    success1 = test_start_handler_import()
    
    # –¢–µ—Å—Ç 2: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    success2 = test_escape_markdown_with_variables()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    success3 = test_problematic_characters()
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"ü§ñ –ò–º–ø–æ—Ä—Ç start.py: {'‚úÖ OK' if success1 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"üîß –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏: {'‚úÖ OK' if success2 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {'‚úÖ OK' if success3 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    
    if success1 and success2 and success3:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üí° –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        print("üí° –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ f-—Å—Ç—Ä–æ–∫–∞—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è.")
        print("üí° –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.")
        print("üí° –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ Markdown.")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")

if __name__ == "__main__":
    main()
