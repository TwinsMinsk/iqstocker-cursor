"""Add test data for MVP."""

import os
import sys
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.models import (
    User, SubscriptionType, Limits, VideoLesson, CalendarEntry
)

def add_test_data():
    """Add test data to database."""
    
    # Create database connection
    database_url = "sqlite:///iqstocker.db"
    engine = create_engine(database_url)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    try:
        # Add test user
        test_user = User(
            telegram_id=12345,
            username="testuser",
            first_name="Test",
            subscription_type=SubscriptionType.FREE,
            created_at=datetime.utcnow()
        )
        session.add(test_user)
        session.flush()  # Get user ID
        
        # Add limits for test user
        test_limits = Limits(
            user_id=test_user.id,
            analytics_total=0,
            analytics_used=0,
            themes_total=1,
            themes_used=0,
            top_themes_total=0,
            top_themes_used=0
        )
        session.add(test_limits)
        
        # Add video lessons
        lessons = [
            VideoLesson(
                title="–ü–æ—á–µ–º—É —Ä–∞–±–æ—Ç—ã –Ω–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è?",
                description="–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–∫ –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –Ω–∏–∑–∫–∏—Ö –ø—Ä–æ–¥–∞–∂",
                url="https://example.com/lesson1",
                order=1,
                is_pro_only=False
            ),
            VideoLesson(
                title="–ö–∞–∫ –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–∫—É–ø–∞—é—Ç?",
                description="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–∫ –æ –≤—ã–±–æ—Ä–µ —Ç–µ–º",
                url="https://example.com/lesson2",
                order=2,
                is_pro_only=True
            ),
            VideoLesson(
                title="–û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å—Ç–æ–∫–∏",
                description="–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å",
                url="https://example.com/lesson3",
                order=3,
                is_pro_only=True
            )
        ]
        
        for lesson in lessons:
            session.add(lesson)
        
        # Add calendar entry
        calendar_entry = CalendarEntry(
            month=12,
            year=2024,
            content={
                "season_description": "–î–µ–∫–∞–±—Ä—å - –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º –∏ –∑–∏–º–Ω–∏–º –∫–∞–Ω–∏–∫—É–ª–∞–º.",
                "upload_now": [
                    {"emoji": "üéÑ", "theme": "–ù–æ–≤—ã–π –≥–æ–¥ –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ"},
                    {"emoji": "‚ùÑÔ∏è", "theme": "–ó–∏–º–Ω–∏–µ —Å—Ü–µ–Ω—ã"},
                    {"emoji": "üéÅ", "theme": "–ü–æ–¥–∞—Ä–∫–∏ –∏ —É–ø–∞–∫–æ–≤–∫–∞"}
                ],
                "prepare_later": [
                    {"emoji": "üíù", "theme": "–î–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞"},
                    {"emoji": "üå∏", "theme": "–í–µ—Å–µ–Ω–Ω–∏–µ —Å—Ü–µ–Ω—ã"},
                    {"emoji": "üå±", "theme": "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –æ–≥–æ—Ä–æ–¥"}
                ]
            },
            created_at=datetime.utcnow()
        )
        session.add(calendar_entry)
        
        session.commit()
        print("Test data added successfully!")
        
    except Exception as e:
        session.rollback()
        print(f"Error adding test data: {e}")
    finally:
        session.close()

if __name__ == "__main__":
    add_test_data()
