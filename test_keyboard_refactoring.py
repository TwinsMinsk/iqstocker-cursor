#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è LEXICON_COMMANDS_RU.
"""

import logging
import sys
import os
import re

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.lexicon.lexicon_ru import LEXICON_COMMANDS_RU

logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s:%(message)s')
logger = logging.getLogger(__name__)


def test_lexicon_commands_exists():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Å–ª–æ–≤–∞—Ä—è LEXICON_COMMANDS_RU."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞—Ä—è LEXICON_COMMANDS_RU...")
    
    if not LEXICON_COMMANDS_RU:
        logger.error("‚ùå –°–ª–æ–≤–∞—Ä—å LEXICON_COMMANDS_RU –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    logger.info(f"‚úÖ –°–ª–æ–≤–∞—Ä—å LEXICON_COMMANDS_RU –Ω–∞–π–¥–µ–Ω —Å {len(LEXICON_COMMANDS_RU)} –∫–ª—é—á–∞–º–∏")
    return True


def test_required_keys():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π...")
    
    required_keys = [
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        'analytics', 'profile', 'themes', 'top_themes', 'lessons', 'calendar', 'faq', 'channel',
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        'do_analytics', 'get_themes', 'back_to_menu', 'back_to_menu_alt', 'go_to_channel',
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        'subscribe_pro', 'upgrade_pro', 'upgrade_ultra', 'upgrade_ultra_alt', 'compare_tariffs', 
        'compare_pro_ultra', 'how_limits_work', 'pay',
        # FAQ –∫–Ω–æ–ø–∫–∏
        'faq_csv', 'faq_limits', 'faq_bot_not_responding', 'faq_support', 'faq_themes',
        'faq_top_themes', 'faq_calendar', 'faq_subscription', 'faq_limits_end', 'faq_payment',
        # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        'admin_stats', 'admin_broadcast', 'admin_system', 'admin_health', 'admin_back',
        'admin_refresh', 'admin_params', 'admin_refresh_data', 'admin_clear_cache',
        # –†–∞—Å—Å—ã–ª–∫–∞
        'broadcast_all', 'broadcast_free', 'broadcast_pro', 'broadcast_test_pro',
        'broadcast_history', 'back_to_broadcast'
    ]
    
    missing_keys = []
    for key in required_keys:
        if key not in LEXICON_COMMANDS_RU:
            missing_keys.append(key)
    
    if missing_keys:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {missing_keys}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def test_no_hardcoded_texts():
    """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤ –∫–Ω–æ–ø–∫–∞—Ö."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤...")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
    hardcoded_pattern = r'InlineKeyboardButton\(text="[^"]*"'
    
    # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = [
        'bot/keyboards/main_menu.py',
        'bot/keyboards/common.py', 
        'bot/keyboards/profile.py',
        'bot/handlers/start.py',
        'bot/handlers/analytics.py',
        'bot/handlers/channel.py',
        'bot/handlers/faq.py'
    ]
    
    hardcoded_found = []
    
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            matches = re.findall(hardcoded_pattern, content)
            if matches:
                hardcoded_found.extend([(file_path, match) for match in matches])
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    if hardcoded_found:
        logger.error("‚ùå –ù–∞–π–¥–µ–Ω—ã –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã:")
        for file_path, match in hardcoded_found:
            logger.error(f"   {file_path}: {match}")
        return False
    
    logger.info("‚úÖ –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return True


def test_lexicon_usage():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LEXICON_COMMANDS_RU –≤ —Ñ–∞–π–ª–∞—Ö."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LEXICON_COMMANDS_RU...")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
    lexicon_pattern = r'LEXICON_COMMANDS_RU\[[\'"]([^\'"]+)[\'"]\]'
    
    files_to_check = [
        'bot/keyboards/main_menu.py',
        'bot/keyboards/common.py',
        'bot/keyboards/profile.py',
        'bot/handlers/start.py',
        'bot/handlers/analytics.py',
        'bot/handlers/channel.py',
        'bot/handlers/faq.py'
    ]
    
    used_keys = set()
    
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            continue
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            matches = re.findall(lexicon_pattern, content)
            used_keys.update(matches)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(used_keys)} –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª—é—á–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    missing_keys = []
    for key in used_keys:
        if key not in LEXICON_COMMANDS_RU:
            missing_keys.append(key)
    
    if missing_keys:
        logger.error(f"‚ùå –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏: {missing_keys}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ")
    return True


def test_keyboard_imports():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ LEXICON_COMMANDS_RU."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ LEXICON_COMMANDS_RU...")
    
    files_to_check = [
        'bot/keyboards/main_menu.py',
        'bot/keyboards/common.py',
        'bot/keyboards/profile.py',
        'bot/handlers/start.py',
        'bot/handlers/analytics.py',
        'bot/handlers/channel.py',
        'bot/handlers/faq.py'
    ]
    
    missing_imports = []
    
    for file_path in files_to_check:
        if not os.path.exists(file_path):
            continue
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            if 'LEXICON_COMMANDS_RU' in content and 'from bot.lexicon.lexicon_ru import LEXICON_COMMANDS_RU' not in content:
                missing_imports.append(file_path)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    if missing_imports:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–∞—Ö: {missing_imports}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def test_keyboard_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        from bot.keyboards.main_menu import get_main_menu_keyboard
        from bot.keyboards.common import add_back_to_menu_button, create_subscription_buttons
        from bot.keyboards.profile import get_profile_keyboard
        from database.models import SubscriptionType
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        main_menu = get_main_menu_keyboard(SubscriptionType.FREE)
        profile_menu = get_profile_keyboard(SubscriptionType.FREE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
        if not main_menu or not profile_menu:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
            return False
        
        logger.info("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    tests = [
        ("Lexicon Commands Exists", test_lexicon_commands_exists),
        ("Required Keys", test_required_keys),
        ("No Hardcoded Texts", test_no_hardcoded_texts),
        ("Lexicon Usage", test_lexicon_usage),
        ("Keyboard Imports", test_keyboard_imports),
        ("Keyboard Functionality", test_keyboard_functionality)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if test_func():
                passed += 1
                logger.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("\n‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        logger.info("   ‚Ä¢ –í—Å–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ LEXICON_COMMANDS_RU")
        logger.info("   ‚Ä¢ –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
        logger.info("   ‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ —Ñ–∞–π–ª—ã")
        logger.info("   ‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
