"""Test CSV processing in bot context."""

import os
import sys

# Set environment variables for MVP
os.environ["DATABASE_URL"] = "sqlite:///iqstocker.db"
os.environ["REDIS_URL"] = "redis://localhost:6379/0"
os.environ["ADMIN_SECRET_KEY"] = "test_secret_key_123"
os.environ["ADMIN_PASSWORD"] = "admin123"

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.database import SessionLocal
from database.models import User, CSVAnalysis, AnalysisStatus, AnalyticsReport, TopTheme
from core.analytics.advanced_csv_processor import AdvancedCSVProcessor

def test_csv_processing():
    """Test CSV processing in bot context."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞")
    print("=" * 50)
    
    db = SessionLocal()
    
    try:
        # Get admin user
        admin_user = db.query(User).filter(User.telegram_id == 811079407).first()
        if not admin_user:
            print("‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_user.username}")
        
        # Get latest CSV analysis
        csv_analysis = db.query(CSVAnalysis).filter(
            CSVAnalysis.user_id == admin_user.id
        ).order_by(CSVAnalysis.created_at.desc()).first()
        
        if not csv_analysis:
            print("‚ùå CSV –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω CSV –∞–Ω–∞–ª–∏–∑: {csv_analysis.id}")
        print(f"üìÅ –§–∞–π–ª: {csv_analysis.file_path}")
        print(f"üìà –°—Ç–∞—Ç—É—Å: {csv_analysis.status}")
        
        # Check if file exists
        if not os.path.exists(csv_analysis.file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_analysis.file_path}")
            return
        
        print(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {csv_analysis.file_path}")
        
        # Test advanced processor
        processor = AdvancedCSVProcessor()
        
        try:
            result = processor.process_csv(
                csv_path=csv_analysis.file_path,
                portfolio_size=csv_analysis.portfolio_size or 100,
                upload_limit=csv_analysis.upload_limit or 50,
                monthly_uploads=csv_analysis.monthly_uploads or 30,
                acceptance_rate=csv_analysis.acceptance_rate or 65.0
            )
            
            print("‚úÖ CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ü–µ—Ä–∏–æ–¥: {result.period_human_ru}")
            print(f"üí∞ –ü—Ä–æ–¥–∞–∂: {result.rows_used}")
            print(f"üíµ –î–æ—Ö–æ–¥: ${result.total_revenue_usd}")
            print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤: {result.unique_assets_sold}")
            print(f"üìà % –ø–æ—Ä—Ç—Ñ–µ–ª—è: {result.portfolio_sold_percent}%")
            
            # Generate report
            report_text = processor.generate_bot_report(result)
            print(f"üìã –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(report_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # Test database operations
            print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
            
            # Create analytics report
            analytics_report = AnalyticsReport(
                csv_analysis_id=csv_analysis.id,
                total_sales=result.rows_used,
                total_revenue=result.total_revenue_usd,
                portfolio_sold_percent=result.portfolio_sold_percent,
                new_works_sales_percent=result.new_works_sales_percent,
                acceptance_rate_calc=result.acceptance_rate,
                upload_limit_usage=result.upload_limit_usage
            )
            db.add(analytics_report)
            db.flush()
            print("‚úÖ AnalyticsReport —Å–æ–∑–¥–∞–Ω")
            
            # Save top themes
            theme_count = 0
            for i, (_, row) in enumerate(result.top10_by_revenue.head(10).iterrows()):
                top_theme = TopTheme(
                    csv_analysis_id=csv_analysis.id,
                    theme_name=row['asset_title'],
                    sales_count=int(row['total_sales']),
                    revenue=float(row['total_revenue']),
                    rank=i + 1
                )
                db.add(top_theme)
                theme_count += 1
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {theme_count} —Ç–æ–ø —Ç–µ–º")
            
            # Update CSV analysis status
            csv_analysis.status = AnalysisStatus.COMPLETED
            from datetime import datetime
            csv_analysis.processed_at = datetime.utcnow()
            
            db.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV: {e}")
            import traceback
            traceback.print_exc()
            db.rollback()
    
    finally:
        db.close()

if __name__ == "__main__":
    test_csv_processing()
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 50)
