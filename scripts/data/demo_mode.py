"""Demo mode for testing without real bot token."""

import os
import sys
import asyncio

# Set environment variables for demo
os.environ["DATABASE_URL"] = "sqlite:///iqstocker.db"
os.environ["REDIS_URL"] = "redis://localhost:6379/0"
os.environ["ADMIN_SECRET_KEY"] = "test_secret_key_123"
os.environ["ADMIN_PASSWORD"] = "admin123"
os.environ["BOT_TOKEN"] = "1234567890:DEMO_TOKEN_FOR_TESTING"

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.settings import settings
from database.models import User, SubscriptionType, Limits, VideoLesson, CalendarEntry
from config.database import SessionLocal

def demo_database():
    """Demo database functionality."""
    
    print("üóÑÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    db = SessionLocal()
    try:
        # Show users
        users = db.query(User).all()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ: {len(users)}")
        for user in users:
            print(f"  - {user.username} ({user.telegram_id}) - {user.subscription_type.value}")
        
        # Show limits
        limits = db.query(Limits).all()
        print(f"–ó–∞–ø–∏—Å–∏ –ª–∏–º–∏—Ç–æ–≤: {len(limits)}")
        
        # Show video lessons
        lessons = db.query(VideoLesson).all()
        print(f"–í–∏–¥–µ–æ—É—Ä–æ–∫–∏: {len(lessons)}")
        for lesson in lessons:
            pro_only = "PRO" if lesson.is_pro_only else "FREE"
            print(f"  - {lesson.title} ({pro_only})")
        
        # Show calendar
        calendar = db.query(CalendarEntry).all()
        print(f"–ó–∞–ø–∏—Å–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {len(calendar)}")
        for entry in calendar:
            print(f"  - {entry.month}.{entry.year}")
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    finally:
        db.close()

def demo_settings():
    """Demo settings loading."""
    
    print("\n‚öôÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print("=" * 50)
    
    print(f"Database URL: {settings.database_url}")
    print(f"Redis URL: {settings.redis_url}")
    print(f"Bot Token: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.bot_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"OpenAI API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.openai_api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"Log Level: {settings.log_level}")
    print(f"Admin Secret: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.admin_secret_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

def demo_imports():
    """Demo imports functionality."""
    
    print("\nüì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤")
    print("=" * 50)
    
    try:
        # Test bot imports
        from bot.handlers import start, menu, profile, analytics, themes
        from bot.keyboards import main_menu, profile as profile_kb
        from bot.middlewares import subscription, limits
        
        # Test core imports
        from core.analytics import csv_parser, metrics_calculator, report_generator
        from core.ai import categorizer, theme_manager
        from core.parser import adobe_stock
        from core.subscriptions import payment_handler
        from core.notifications import scheduler, sender
        
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    return True

def demo_keyboards():
    """Demo keyboard generation."""
    
    print("\n‚å®Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("=" * 50)
    
    try:
        from bot.keyboards.main_menu import get_main_menu_keyboard
        from database.models import SubscriptionType
        
        # Test different subscription types
        for sub_type in [SubscriptionType.FREE, SubscriptionType.PRO, SubscriptionType.ULTRA]:
            keyboard = get_main_menu_keyboard(sub_type)
            print(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è {sub_type.value}: {len(keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")

def demo_ai_categorizer():
    """Demo AI categorizer."""
    
    print("\nü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    try:
        from core.ai.categorizer import ThemeCategorizer
        
        categorizer = ThemeCategorizer()
        
        # Test fallback categorization
        tags = ["business", "office", "meeting", "professional", "corporate"]
        themes = categorizer._fallback_categorization(tags)
        
        print(f"–¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–≥–∏: {tags}")
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: {themes}")
        print("‚úÖ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞: {e}")

async def main():
    """Run demo mode."""
    
    print("üé≠ IQStocker Bot - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    print("–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram –±–æ—Ç–∞")
    print("=" * 60)
    
    # Create necessary directories
    os.makedirs("logs", exist_ok=True)
    os.makedirs("uploads", exist_ok=True)
    
    # Run demos
    demo_database()
    demo_settings()
    demo_imports()
    demo_keyboards()
    demo_ai_categorizer()
    
    print("\n" + "=" * 60)
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –≤ Telegram")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_bot_venv.py")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
