#!/usr/bin/env python3
"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ LLM-—Å–µ—Ä–≤–∏—Å–∞."""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
from config.database import SessionLocal
from database.models import LLMSettings, LLMProviderType
from core.ai.llm_service import LLMServiceFactory
from core.ai.providers import GeminiProvider, OpenAIProvider, ClaudeProvider


async def test_llm_providers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 50)
    
    # –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tags_by_asset = {
        "123": ["business", "office", "meeting", "corporate", "professional"],
        "456": ["technology", "computer", "coding", "software", "digital"],
        "789": ["lifestyle", "home", "family", "daily", "modern"]
    }
    
    sales_data = {
        "123": {"sales": 15, "revenue": 75.0},
        "456": {"sales": 8, "revenue": 40.0},
        "789": {"sales": 12, "revenue": 60.0}
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    providers_to_test = [
        ("Gemini", GeminiProvider, "test-gemini-key"),
        ("OpenAI", OpenAIProvider, "test-openai-key"),
        ("Claude", ClaudeProvider, "test-claude-key")
    ]
    
    for provider_name, provider_class, test_key in providers_to_test:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider_name}...")
        
        try:
            provider = provider_class(test_key)
            
            # –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–º (–º–æ–∫–∏—Ä—É–µ–º API-–≤—ã–∑–æ–≤)
            print(f"  ‚úÖ {provider_name} –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"  üìä –ú–æ–¥–µ–ª—å: {provider.model_name}")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–º
            user_themes = ["Business", "Technology", "Lifestyle"]
            print(f"  üéØ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º –¥–ª—è: {', '.join(user_themes)}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ {provider_name}: {e}")


def test_database_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        from database.models import LLMSettings, AssetDetails
        
        print("‚úÖ –ú–æ–¥–µ–ª–∏ LLMSettings –∏ AssetDetails –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ LLM –Ω–∞—Å—Ç—Ä–æ–µ–∫
        test_settings = LLMSettings(
            provider_name=LLMProviderType.GEMINI,
            api_key_encrypted="test-encrypted-key",
            is_active=True,
            model_name="gemini-2.5-flash-lite"
        )
        
        print("‚úÖ –ú–æ–¥–µ–ª—å LLMSettings —Å–æ–∑–¥–∞–Ω–∞")
        print(f"  üìã –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {test_settings.provider_name}")
        print(f"  üîß –ú–æ–¥–µ–ª—å: {test_settings.model_name}")
        print(f"  ‚ö° –ê–∫—Ç–∏–≤–µ–Ω: {test_settings.is_active}")
        
        # –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        try:
            test_settings.encrypt_api_key("test-api-key")
            decrypted_key = test_settings.decrypt_api_key()
            print(f"‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {decrypted_key == 'test-api-key'}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    finally:
        db.close()


def test_factory():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤."""
    
    print("\nüè≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
        providers = LLMServiceFactory.list_available_providers()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {[p.value for p in providers]}")
        
        # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        for provider_type in providers:
            info = LLMServiceFactory.get_provider_info(provider_type)
            print(f"  üìä {provider_type.value}: {info.get('name', 'Unknown')} - {info.get('model', 'Unknown')}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —Ç–∏–ø—É
        gemini_provider = LLMServiceFactory.get_provider_by_type(LLMProviderType.GEMINI, "test-key")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä Gemini: {type(gemini_provider).__name__}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏: {e}")


async def test_playwright_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Playwright –ø–∞—Ä—Å–µ—Ä–∞."""
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Playwright –ø–∞—Ä—Å–µ—Ä–∞")
    print("=" * 50)
    
    try:
        from core.parser.adobe_stock_playwright import AdobeStockPlaywrightParser
        
        parser = AdobeStockPlaywrightParser()
        print("‚úÖ Playwright –ø–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è URL
        test_url = parser._create_asset_url("123456", "Business Meeting")
        print(f"‚úÖ URL —Å–æ–∑–¥–∞–Ω: {test_url}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è slug
        test_slug = parser._create_slug("Business Meeting & Corporate Office")
        print(f"‚úÖ Slug —Å–æ–∑–¥–∞–Ω: {test_slug}")
        
        print("‚ÑπÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π API-–∫–ª—é—á")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")


def test_dramatiq_actors():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dramatiq –∞–∫—Ç–æ—Ä–æ–≤."""
    
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dramatiq –∞–∫—Ç–æ—Ä–æ–≤")
    print("=" * 50)
    
    try:
        from workers.theme_actors import scrape_and_categorize_themes, update_global_themes
        
        print("‚úÖ –ê–∫—Ç–æ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
        print(f"  üîÑ scrape_and_categorize_themes: {scrape_and_categorize_themes}")
        print(f"  üîÑ update_global_themes: {update_global_themes}")
        
        print("‚ÑπÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Redis –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–æ—Ä–æ–≤: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏-–º–æ–¥–µ–ª—å–Ω–æ–≥–æ LLM-—Å–µ—Ä–≤–∏—Å–∞ IQStocker")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    await test_llm_providers()
    test_database_models()
    test_factory()
    await test_playwright_parser()
    test_dramatiq_actors()
    
    print("\n" + "=" * 70)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ API-–∫–ª—é—á–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: python admin/app.py")
    print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ /llm-settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä—ã Dramatiq –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
    print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É CSV –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–º")


if __name__ == "__main__":
    asyncio.run(main())
