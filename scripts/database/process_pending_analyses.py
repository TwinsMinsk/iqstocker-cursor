#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö CSV –∞–Ω–∞–ª–∏–∑–æ–≤.
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = Path("local.env")
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

async def process_pending_analyses():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∞–Ω–∞–ª–∏–∑—ã."""
    
    print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∞–Ω–∞–ª–∏–∑—ã...")
    
    try:
        from config.database import SessionLocal
        from database.models import CSVAnalysis, AnalysisStatus, AnalyticsReport, TopTheme
        from core.analytics.advanced_csv_processor import AdvancedCSVProcessor
        from core.analytics.report_generator_fixed import FixedReportGenerator
        from datetime import datetime, timezone
        
        db = SessionLocal()
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –∞–Ω–∞–ª–∏–∑—ã
            pending_analyses = db.query(CSVAnalysis).filter(
                CSVAnalysis.status == AnalysisStatus.PENDING
            ).all()
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–∏—Å—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {len(pending_analyses)}")
            
            if not pending_analyses:
                print("‚ÑπÔ∏è  –ó–∞–≤–∏—Å—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return True
            
            processor = AdvancedCSVProcessor()
            generator = FixedReportGenerator()
            
            for analysis in pending_analyses:
                print(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ {analysis.id}...")
                print(f"   –§–∞–π–ª: {analysis.file_path}")
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {analysis.user_id}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                    if not os.path.exists(analysis.file_path):
                        print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {analysis.file_path}")
                        analysis.status = AnalysisStatus.FAILED
                        db.commit()
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV
                    result = processor.process_csv(
                        csv_path=analysis.file_path,
                        portfolio_size=analysis.portfolio_size or 100,
                        upload_limit=analysis.upload_limit or 50,
                        monthly_uploads=analysis.monthly_uploads or 30,
                        acceptance_rate=analysis.acceptance_rate or 65.0
                    )
                    
                    print(f"   ‚úÖ CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω:")
                    print(f"      - –ü—Ä–æ–¥–∞–∂: {result.rows_used}")
                    print(f"      - –î–æ—Ö–æ–¥: ${result.total_revenue_usd}")
                    print(f"      - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤: {result.unique_assets_sold}")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    report = generator.generate_monthly_report(result)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    analytics_report = AnalyticsReport(
                        csv_analysis_id=analysis.id,
                        total_sales=result.rows_used,
                        total_revenue=result.total_revenue_usd,
                        portfolio_sold_percent=result.portfolio_sold_percent,
                        new_works_sales_percent=result.new_works_sales_percent,
                        acceptance_rate_calc=result.acceptance_rate,
                        upload_limit_usage=result.upload_limit_usage
                    )
                    db.add(analytics_report)
                    db.flush()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø —Ç–µ–º—ã
                    for i, (_, row) in enumerate(result.top10_by_revenue.head(10).iterrows()):
                        top_theme = TopTheme(
                            csv_analysis_id=analysis.id,
                            theme_name=row['asset_title'],
                            sales_count=int(row['total_sales']),
                            revenue=float(row['total_revenue']),
                            rank=i + 1
                        )
                        db.add(top_theme)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    analysis.status = AnalysisStatus.COMPLETED
                    analysis.processed_at = datetime.now(timezone.utc)
                    
                    print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ {analysis.id} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ {analysis.id}: {e}")
                    analysis.status = AnalysisStatus.FAILED
                    import traceback
                    traceback.print_exc()
                
                db.commit()
            
            print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return True
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤: {e}")
        import traceback
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
        traceback.print_exc()
        return False

def check_file_exists(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
    
    if os.path.exists(file_path):
        size = os.path.getsize(file_path)
        print(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
        return True
    else:
        print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö CSV –∞–Ω–∞–ª–∏–∑–æ–≤")
    print("=" * 60)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∞–Ω–∞–ª–∏–∑—ã
    success = await process_pending_analyses()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –í—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –∞–Ω–∞–ª–∏–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        print("üí° –¢–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–æ–≤—ã–µ CSV —Ñ–∞–π–ª—ã.")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main())
