#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = Path("local.env")
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

async def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞...")
    
    try:
        from aiogram import Bot
        from config.settings import settings
        
        bot = Bot(token=settings.bot_token)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
        print(f"   ID: {bot_info.id}")
        print(f"   –¢–æ–∫–µ–Ω: {settings.bot_token[:10]}...")
        
        await bot.session.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return False

def check_database_users():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    print("\nüë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from config.database import SessionLocal
        from database.models import User, SubscriptionType, Limits
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.query(User).all()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            
            if users:
                for user in users:
                    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}:")
                    print(f"      Telegram ID: {user.telegram_id}")
                    print(f"      Username: @{user.username}")
                    print(f"      –ò–º—è: {user.first_name}")
                    print(f"      –ü–æ–¥–ø–∏—Å–∫–∞: {user.subscription_type}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                    limits = db.query(Limits).filter(Limits.user_id == user.id).first()
                    if limits:
                        print(f"      –õ–∏–º–∏—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {limits.analytics_remaining}")
                    else:
                        print(f"      ‚ùå –õ–∏–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                print("üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
            
            return len(users) > 0
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_csv_analyses():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑—ã CSV –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑—ã CSV –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from config.database import SessionLocal
        from database.models import CSVAnalysis, AnalysisStatus
        
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã
            analyses = db.query(CSVAnalysis).all()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {len(analyses)}")
            
            if analyses:
                for analysis in analyses:
                    print(f"   üìà –ê–Ω–∞–ª–∏–∑ {analysis.id}:")
                    print(f"      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {analysis.user_id}")
                    print(f"      –°—Ç–∞—Ç—É—Å: {analysis.status}")
                    print(f"      –§–∞–π–ª: {analysis.file_path}")
                    print(f"      –°–æ–∑–¥–∞–Ω: {analysis.created_at}")
                    if analysis.processed_at:
                        print(f"      –û–±—Ä–∞–±–æ—Ç–∞–Ω: {analysis.processed_at}")
            else:
                print("‚ÑπÔ∏è  –ê–Ω–∞–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return True
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def create_test_user():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    print("\nüë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        from config.database import SessionLocal
        from database.models import User, SubscriptionType, Limits
        from datetime import datetime, timezone
        
        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id = 811079407
            existing_user = db.query(User).filter(User.telegram_id == 811079407).first()
            
            if existing_user:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_user.username}")
                return True
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # Use naive datetime for database compatibility (TIMESTAMP WITHOUT TIME ZONE)
            expires_at = datetime.utcnow().replace(year=2030)
            test_user = User(
                telegram_id=811079407,
                username="test_user",
                first_name="Test User",
                subscription_type=SubscriptionType.PRO,
                subscription_expires_at=expires_at
            )
            db.add(test_user)
            db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã
            limits = Limits(
                user_id=test_user.id,
                analytics_total=10,
                analytics_used=0,
                themes_total=10,
                themes_used=0,
                top_themes_total=10,
                top_themes_used=0
            )
            db.add(limits)
            db.commit()
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:")
            print(f"   ID: {test_user.id}")
            print(f"   Telegram ID: {test_user.telegram_id}")
            print(f"   Username: @{test_user.username}")
            print(f"   –ü–æ–¥–ø–∏—Å–∫–∞: {test_user.subscription_type}")
            print(f"   –õ–∏–º–∏—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {limits.analytics_remaining}")
            
            return True
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    bot_ok = await check_bot_status()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_ok = check_database_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑—ã
    analyses_ok = check_csv_analyses()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ
    if not users_ok:
        print("\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ...")
        create_test_user()
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print(f"ü§ñ –ë–æ—Ç: {'‚úÖ OK' if bot_ok else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {'‚úÖ OK' if users_ok else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"üìä –ê–Ω–∞–ª–∏–∑—ã: {'‚úÖ OK' if analyses_ok else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    
    if bot_ok and users_ok:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üí° –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CSV —Ñ–∞–π–ª –±–æ—Ç—É.")
        print("üí° –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç (python run_local_bot.py)")
        print("   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ —Ç–æ–∫–µ–Ω –≤ local.env")
        print("   - –ï—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.")
        print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.")

if __name__ == "__main__":
    asyncio.run(main())