#!/usr/bin/env python3
"""Test script to verify themes are working in bot algorithm."""

import sys
import os
from pathlib import Path

# Add project root to path
PROJECT_ROOT = str(Path(__file__).resolve().parent)
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

from config.database import SessionLocal
from database.models import GlobalTheme, User, SubscriptionType
from database.models.user_issued_theme import UserIssuedTheme
from sqlalchemy import func, desc

def test_themes_algorithm():
    """Test the themes algorithm with different subscription types."""
    
    db = SessionLocal()
    try:
        # Get total themes count
        total_themes = db.query(GlobalTheme).count()
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ–º –≤ –±–∞–∑–µ: {total_themes}")
        
        # Test for different subscription types
        subscription_tests = [
            (SubscriptionType.FREE, 1),
            (SubscriptionType.TEST_PRO, 5),
            (SubscriptionType.PRO, 5),
            (SubscriptionType.ULTRA, 10)
        ]
        
        for sub_type, expected_count in subscription_tests:
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ {sub_type.value}:")
            
            # Get random themes (simulating the algorithm)
            themes = db.query(GlobalTheme).order_by(func.random()).limit(expected_count).all()
            
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–º: {len(themes)}")
            print(f"   –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º:")
            for i, theme in enumerate(themes[:3], 1):
                print(f"   {i}. {theme.theme_name}")
        
        # Test unique themes selection (simulating UserIssuedTheme logic)
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º:")
        
        # Simulate user who already has some themes
        issued_theme_ids = [1, 2, 3, 4, 5]  # Simulate some issued themes
        
        # Get themes not yet issued to user
        available_themes = db.query(GlobalTheme).filter(
            ~GlobalTheme.id.in_(issued_theme_ids)
        ).order_by(func.random()).limit(5).all()
        
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º: {len(available_themes)}")
        for i, theme in enumerate(available_themes, 1):
            print(f"   {i}. {theme.theme_name}")
        
        print(f"\n‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º —Ç–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–µ–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–∏–º —Ç–∞—Ä–∏—Ñ–∞–º:")
        print(f"   ‚Ä¢ FREE: 1 —Ç–µ–º–∞")
        print(f"   ‚Ä¢ PRO/TEST_PRO: 5 —Ç–µ–º")
        print(f"   ‚Ä¢ ULTRA: 10 —Ç–µ–º")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        raise
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–¥–∞—á–∏ —Ç–µ–º...")
    test_themes_algorithm()
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
