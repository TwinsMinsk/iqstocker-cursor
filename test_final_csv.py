#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–æ–≤.
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = Path("local.env")
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

async def test_csv_processing_fixed():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É CSV."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É CSV...")
    
    try:
        from database.models import CSVAnalysis, AnalysisStatus
        from config.database import SessionLocal
        from bot.handlers.analytics import process_csv_analysis
        from aiogram.types import Message
        from datetime import datetime, timezone
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
        test_csv_path = "uploads/test_final_analysis.csv"
        
        test_data = """2025-01-15T10:00:00+00:00,12345,Test Photo 1,custom,1.50,photos,test1.jpg,user1,HD
2025-01-16T11:00:00+00:00,12346,Test Photo 2,subscription,2.00,photos,test2.jpg,user1,XXL
2025-01-17T12:00:00+00:00,12347,Test Video 1,custom,3.00,videos,test3.mp4,user1,HD1080
2025-01-18T13:00:00+00:00,12348,Test Illustration 1,custom,2.50,illustrations,test4.ai,user1,Vector
2025-01-19T14:00:00+00:00,12349,Test Photo 3,subscription,1.75,photos,test5.jpg,user1,HD
2025-01-20T15:00:00+00:00,12350,Test Photo 4,custom,2.25,photos,test6.jpg,user1,XXL
2025-01-21T16:00:00+00:00,12351,Test Video 2,subscription,4.00,videos,test7.mp4,user1,HD1080
2025-01-22T17:00:00+00:00,12352,Test Illustration 2,custom,3.50,illustrations,test8.ai,user1,Vector"""
        
        with open(test_csv_path, 'w', encoding='utf-8') as f:
            f.write(test_data)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π CSV —Å–æ–∑–¥–∞–Ω: {test_csv_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        try:
            csv_analysis = CSVAnalysis(
                user_id=1,
                file_path=test_csv_path,
                month=datetime.now().month,
                year=datetime.now().year,
                status=AnalysisStatus.PENDING,
                portfolio_size=100,
                upload_limit=50,
                monthly_uploads=30,
                acceptance_rate=65.0
            )
            db.add(csv_analysis)
            db.commit()
            db.refresh(csv_analysis)
            
            print(f"‚úÖ –ó–∞–ø–∏—Å—å CSV –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {csv_analysis.id}")
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
            class MockMessage:
                async def answer(self, text):
                    print(f"üì§ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {text[:100]}...")
            
            message = MockMessage()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–Ω–∞–ª–∏–∑–∞ {csv_analysis.id}...")
            await process_csv_analysis(csv_analysis.id, message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            db.refresh(csv_analysis)
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞: {csv_analysis.status}")
            
            if csv_analysis.status == AnalysisStatus.COMPLETED:
                print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return False
            
        finally:
            db.close()
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_csv_path):
            os.remove(test_csv_path)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üöÄ –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    success = await test_csv_processing_fixed()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å CSV —Ñ–∞–π–ª—ã.")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CSV —Ñ–∞–π–ª –±–æ—Ç—É.")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main())
