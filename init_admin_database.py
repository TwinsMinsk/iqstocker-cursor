"""Initialize all database tables for admin panel."""

import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database.models import Base, User, SubscriptionType, Limits, CSVAnalysis, AnalyticsReport, TopTheme, GlobalTheme, ThemeRequest, VideoLesson, CalendarEntry, BroadcastMessage
from datetime import datetime, timezone

def init_all_tables():
    """Create all database tables."""
    
    print("üóÑÔ∏è Creating all database tables...")
    
    try:
        # Use SQLite for admin panel
        engine = create_engine('sqlite:///iqstocker.db')
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
        # Create all tables
        Base.metadata.create_all(bind=engine)
        print("‚úÖ All tables created successfully!")
        
        # Check if we have any data
        db = SessionLocal()
        try:
            users_count = db.query(User).count()
            lessons_count = db.query(VideoLesson).count()
            calendar_count = db.query(CalendarEntry).count()
            broadcasts_count = db.query(BroadcastMessage).count()
            
            print(f"üìä Current data:")
            print(f"   Users: {users_count}")
            print(f"   Video lessons: {lessons_count}")
            print(f"   Calendar entries: {calendar_count}")
            print(f"   Broadcast messages: {broadcasts_count}")
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Error creating tables: {e}")


def create_sample_data():
    """Create sample data for testing."""
    
    print("\nüìù Creating sample data...")
    
    try:
        # Use SQLite for admin panel
        engine = create_engine('sqlite:///iqstocker.db')
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
        db = SessionLocal()
        try:
            # Create sample video lessons if none exist
            if db.query(VideoLesson).count() == 0:
                lessons_data = [
                    {
                        "title": "–£—Ä–æ–∫ 1. –ü–æ—á–µ–º—É —Ä–∞–±–æ—Ç—ã –Ω–µ –ø—Ä–æ–¥–∞—é—Ç—Å—è?",
                        "description": "–†–∞–∑–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–∏–∑–∫–∏—Ö –ø—Ä–æ–¥–∞–∂: –∫–∞—á–µ—Å—Ç–≤–æ, —Ç–µ–º—ã, –∫–ª—é—á–∏.",
                        "url": "https://example.com/lesson1",
                        "is_pro_only": False,
                        "order": 1
                    },
                    {
                        "title": "–£—Ä–æ–∫ 2. –ö–∞–∫ –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–∫—É–ø–∞—é—Ç?",
                        "description": "–ü–æ—à–∞–≥–æ–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞—é, –∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∏—à–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å–ø—Ä–æ—Å–æ–º.",
                        "url": "https://example.com/lesson2",
                        "is_pro_only": True,
                        "order": 2
                    },
                    {
                        "title": "–£—Ä–æ–∫ 3. –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å—Ç–æ–∫–∏.",
                        "description": "–ö–∞–∫–∏–µ –º–µ–ª–æ—á–∏ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É–±–∏–≤–∞—é—Ç –ø—Ä–æ–¥–∞–∂–∏: —Ñ–æ—Ä–º–∞—Ç—ã, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ–ø–∏—Å–∞–Ω–∏–µ.",
                        "url": "https://example.com/lesson3",
                        "is_pro_only": True,
                        "order": 3
                    }
                ]
                
                for data in lessons_data:
                    lesson = VideoLesson(**data)
                    db.add(lesson)
                
                print("‚úÖ Sample video lessons created")
            
            # Create sample calendar entry if none exist
            if db.query(CalendarEntry).count() == 0:
                calendar_entry = CalendarEntry(
                    month=10,
                    year=datetime.now().year,
                    description="–û—Å–µ–Ω—å ‚Äî –≥–æ—Ä—è—á–∏–π —Å–µ–∑–æ–Ω –¥–ª—è —Å—Ç–æ–∫–æ–≤: –º–Ω–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, —É—é—Ç–Ω—ã—Ö —Å—é–∂–µ—Ç–æ–≤ –∏ –ø–µ—Ä–≤—ã—Ö –∑–∏–º–Ω–∏—Ö –∑–∞–≥–æ—Ç–æ–≤–æ–∫...",
                    load_now_themes=["üéÉ –•—ç–ª–ª–æ—É–∏–Ω", "üçÇ Harvest / Thanksgiving", "üõçÔ∏è –û—Å–µ–Ω–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏", "üçÅ –û—Å–µ–Ω–Ω–∏–µ —Å—Ü–µ–Ω—ã"],
                    prepare_themes=["üéÑ –ù–æ–≤—ã–π –≥–æ–¥ –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ", "‚ùÑÔ∏è –ó–∏–º–Ω–∏–µ —Å—Ü–µ–Ω—ã (—Å–ø–æ—Ä—Ç, –ø—Ä–æ–≥—É–ª–∫–∏, —Å–Ω–µ–≥)", "üõí Black Friday / Cyber Monday", "üéì –û—Å–µ–Ω–Ω–∏–µ –∫–∞–º–ø—É—Å—ã, —Å—Ç—É–¥–µ–Ω—Ç—ã"]
                )
                db.add(calendar_entry)
                print("‚úÖ Sample calendar entry created")
            
            # Create sample broadcast message if none exist
            if db.query(BroadcastMessage).count() == 0:
                broadcast = BroadcastMessage(
                    text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IQStocker! üéâ",
                    recipients_count=1,
                    sent_at=datetime.now(timezone.utc)
                )
                db.add(broadcast)
                print("‚úÖ Sample broadcast message created")
            
            db.commit()
            print("‚úÖ All sample data created successfully!")
            
        except Exception as e:
            print(f"‚ùå Error creating sample data: {e}")
            db.rollback()
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Error in create_sample_data: {e}")


def main():
    """Initialize database for admin panel."""
    
    print("üöÄ Initializing database for admin panel...\n")
    
    # Create all tables
    init_all_tables()
    
    # Create sample data
    create_sample_data()
    
    print("\nüéâ Database initialization completed!")
    print("Now the admin panel should work without errors.")


if __name__ == "__main__":
    main()
