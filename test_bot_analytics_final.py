"""Final test of bot analytics."""

import os
import sys

# Set environment variables for MVP
os.environ["DATABASE_URL"] = "sqlite:///iqstocker.db"
os.environ["REDIS_URL"] = "redis://localhost:6379/0"
os.environ["ADMIN_SECRET_KEY"] = "test_secret_key_123"
os.environ["ADMIN_PASSWORD"] = "admin123"

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.database import SessionLocal
from database.models import User, CSVAnalysis, AnalyticsReport, TopTheme
from core.analytics.report_generator_fixed import FixedReportGenerator
from core.analytics.advanced_csv_processor import AdvancedCSVProcessor

def test_bot_analytics_final():
    """Final test of bot analytics."""
    
    print("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–æ—Ç–∞")
    print("=" * 50)
    
    db = SessionLocal()
    
    try:
        # Check admin user
        admin_user = db.query(User).filter(User.telegram_id == 811079407).first()
        if admin_user:
            print(f"‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_user.username}")
            print(f"   –ü–æ–¥–ø–∏—Å–∫–∞: {admin_user.subscription_type}")
        else:
            print("‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Check CSV analyses
        csv_analyses = db.query(CSVAnalysis).filter(
            CSVAnalysis.user_id == admin_user.id
        ).all()
        
        print(f"üìä CSV –∞–Ω–∞–ª–∏–∑–æ–≤: {len(csv_analyses)}")
        
        for analysis in csv_analyses:
            print(f"\nüìã –ê–Ω–∞–ª–∏–∑ ID {analysis.id}:")
            print(f"   –§–∞–π–ª: {analysis.file_path}")
            print(f"   –°—Ç–∞—Ç—É—Å: {analysis.status}")
            print(f"   –ü–µ—Ä–∏–æ–¥: {analysis.month}.{analysis.year}")
            
            # Check analytics report
            report = db.query(AnalyticsReport).filter(
                AnalyticsReport.csv_analysis_id == analysis.id
            ).first()
            
            if report:
                print(f"   üìà –û—Ç—á–µ—Ç: {report.total_sales} –ø—Ä–æ–¥–∞–∂, ${report.total_revenue}")
                print(f"   üìä % –ø–æ—Ä—Ç—Ñ–µ–ª—è: {report.portfolio_sold_percent}%")
                print(f"   üÜï –î–æ–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç: {report.new_works_sales_percent}%")
            else:
                print("   ‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # Check top themes
            themes = db.query(TopTheme).filter(
                TopTheme.csv_analysis_id == analysis.id
            ).all()
            
            print(f"   üèÜ –¢–æ–ø —Ç–µ–º: {len(themes)}")
            
            if themes:
                print("   –¢–æ–ø-3 —Ç–µ–º—ã:")
                for i, theme in enumerate(themes[:3], 1):
                    print(f"     {i}. {theme.theme_name}: {theme.sales_count} –ø—Ä–æ–¥–∞–∂, ${theme.revenue}")
        
        # Test report generation
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤...")
        
        latest_analysis = db.query(CSVAnalysis).filter(
            CSVAnalysis.user_id == admin_user.id
        ).order_by(CSVAnalysis.created_at.desc()).first()
        
        if latest_analysis and os.path.exists(latest_analysis.file_path):
            processor = AdvancedCSVProcessor()
            result = processor.process_csv(
                csv_path=latest_analysis.file_path,
                portfolio_size=latest_analysis.portfolio_size or 100,
                upload_limit=latest_analysis.upload_limit or 50,
                monthly_uploads=latest_analysis.monthly_uploads or 30,
                acceptance_rate=latest_analysis.acceptance_rate or 65.0
            )
            
            report_generator = FixedReportGenerator()
            
            # Generate monthly report
            monthly_report = report_generator.generate_monthly_report(result)
            print(f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç: {len(monthly_report)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # Generate top themes report
            top_themes_report = report_generator.generate_top_themes_report(
                result, admin_user.subscription_type.value
            )
            print(f"‚úÖ –û—Ç—á–µ—Ç —Ç–æ–ø —Ç–µ–º: {len(top_themes_report)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # Show sample of monthly report
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:")
            print("-" * 30)
            print(monthly_report[:200] + "..." if len(monthly_report) > 200 else monthly_report)
        
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()

if __name__ == "__main__":
    test_bot_analytics_final()
    
    print("\n" + "=" * 50)
    print("üöÄ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_bot_venv.py")
    print("=" * 50)

