"""Themes handler with horizontal navigation."""

from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import Session

from config.database import SessionLocal
from database.models import User, SubscriptionType, Limits
from bot.lexicon import LEXICON_RU
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.keyboards.common import create_themes_keyboard
from core.ai.enhanced_theme_manager import get_enhanced_theme_manager
from bot.utils.theme_formatter import format_themes, format_single_theme
from bot.utils.safe_edit import safe_edit_message

router = Router()


@router.callback_query(F.data == "themes")
async def themes_callback(callback: CallbackQuery, user: User, limits: Limits):
    """Handle themes callback - show welcome screen."""
    
    theme_manager = get_enhanced_theme_manager()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —Ç–∞—Ä–∏—Ñ—É
    if user.subscription_type == SubscriptionType.FREE:
        themes_text = f"üéØ <b>–¢–µ–º—ã –∏ —Ç—Ä–µ–Ω–¥—ã</b>\n\n{LEXICON_RU['themes_intro_free']}"
    else:
        themes_text = f"üéØ <b>–¢–µ–º—ã –∏ —Ç—Ä–µ–Ω–¥—ã</b>\n\n{LEXICON_RU['themes_intro_pro']}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    can_request = theme_manager.can_request_themes(user.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∫–Ω–æ–ø–∫–æ–π –¥–µ–π—Å—Ç–≤–∏—è
    await safe_edit_message(
        callback=callback,
        text=themes_text,
        reply_markup=create_themes_keyboard(user.subscription_type, can_request, limits)
    )
    await callback.answer()


@router.callback_query(F.data == "get_themes")
async def get_themes_callback(callback: CallbackQuery, user: User, limits: Limits):
    """Handle get themes callback - generate and show themes list."""
    
    theme_manager = get_enhanced_theme_manager()
    
    # Check limits
    if limits.themes_remaining <= 0:
        await safe_edit_message(
            callback=callback,
            text="üö´ –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ —Ç–µ–º—ã.\n\n–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤.",
            reply_markup=get_main_menu_keyboard(user.subscription_type)
        )
        await callback.answer()
        return
    
    # Check if user can request themes
    if not theme_manager.can_request_themes(user.id):
        await safe_edit_message(
            callback=callback,
            text="‚è∞ –¢—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª —Ç–µ–º—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.\n\n–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.",
            reply_markup=get_main_menu_keyboard(user.subscription_type)
        )
        await callback.answer()
        return
    
    # Generate themes
    themes_count = theme_manager.get_themes_for_subscription(user.subscription_type)
    themes = await theme_manager.generate_weekly_themes(
        user.id, user.subscription_type, themes_count
    )
    
    if not themes:
        await safe_edit_message(
            callback=callback,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard(user.subscription_type)
        )
        await callback.answer()
        return
    
    # Save theme request
    theme_manager.save_theme_request(user.id, themes)
    
    # Update limits
    db = SessionLocal()
    try:
        limits.themes_used += 1
        db.commit()
    finally:
        db.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if user.subscription_type == SubscriptionType.FREE:
        themes_text = f"üéØ <b>–¢–µ–º—ã –∏ —Ç—Ä–µ–Ω–¥—ã</b>\n\n{LEXICON_RU['themes_list_header_free']}\n"
    else:
        themes_text = f"üéØ <b>–¢–µ–º—ã –∏ —Ç—Ä–µ–Ω–¥—ã</b>\n\n{LEXICON_RU['themes_list_header_pro']}\n"
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–º
    for i, theme_data in enumerate(themes, 1):
        if isinstance(theme_data, str):
            theme_name = theme_data
        else:
            theme_name = theme_data.get('theme', theme_data.get('theme_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞'))
        themes_text += f"{i}. {theme_name}\n"
    
    # –î–∏—Å–∫–ª–µ–π–º–µ—Ä—ã
    themes_text += f"\n{LEXICON_RU['themes_history_disclaimer']}\n"
    themes_text += f"{LEXICON_RU['themes_urgency_note']}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å —Ç–µ–º–∞–º–∏ (—Ç–µ–ø–µ—Ä—å –∫—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω)
    await safe_edit_message(
        callback=callback,
        text=themes_text,
        reply_markup=create_themes_keyboard(user.subscription_type, False, limits)
    )
    await callback.answer()
