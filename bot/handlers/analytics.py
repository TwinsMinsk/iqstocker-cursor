"""Analytics handler with horizontal navigation."""

import os
import shutil
import asyncio
from datetime import datetime, timezone
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message, Document, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from config.database import SessionLocal
from database.models import User, SubscriptionType, CSVAnalysis, AnalysisStatus, Limits, AnalyticsReport, TopTheme
from bot.lexicon import LEXICON_RU
from bot.lexicon.lexicon_ru import LEXICON_COMMANDS_RU
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.keyboards.common import create_analytics_keyboard
from bot.states.analytics import AnalyticsStates
from core.analytics.csv_parser import CSVParser
from core.analytics.report_generator import ReportGenerator
from core.analytics.advanced_csv_processor import AdvancedCSVProcessor
from core.analytics.report_generator_fixed import FixedReportGenerator
from config.settings import settings
from bot.utils.safe_edit import safe_edit_message, safe_delete_message

router = Router()


@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext, user: User):
    """Handle cancel command during data collection."""
    
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
        return
    
    # Clear state
    await state.clear()
    
    # Return to main menu
    await message.answer(
        "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard(user.subscription_type)
    )


@router.callback_query(F.data == "analytics_start")
async def analytics_start_callback(callback: CallbackQuery, user: User):
    """Handle analytics start button from welcome sequence."""
    
    # Edit message to show CSV upload prompt
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=LEXICON_COMMANDS_RU['back_to_menu'], callback_data="main_menu")]
    ])
    
    await safe_edit_message(
        callback=callback,
        text=LEXICON_RU['csv_upload_prompt'],
        reply_markup=back_keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "analytics")
async def analytics_callback(callback: CallbackQuery, user: User, limits: Limits):
    """Handle analytics callback from main menu."""
    
    if user.subscription_type == SubscriptionType.FREE:
        # Show limitation message for FREE users
        await safe_edit_message(
            callback=callback,
            text=LEXICON_RU['analytics_unavailable_free'],
            reply_markup=create_analytics_keyboard(user.subscription_type)
        )
    else:
        # Check limits
        if limits.analytics_remaining <= 0:
            limit_text = """üö´ –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É.

–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤."""
            
            await safe_edit_message(
                callback=callback,
                text=limit_text,
                reply_markup=get_main_menu_keyboard(user.subscription_type)
            )
        else:
            # Show analytics interface for PRO users
            analytics_text = f"""üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>

–ó–∞–≥—Ä—É–∑–∏ CSV-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ Adobe Stock –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Adobe Stock –∑–∞–π–¥–∏ –≤ ¬´–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª
2. –í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - –¥–µ–π—Å—Ç–≤–∏–µ, –ø–µ—Ä–∏–æ–¥ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü
3. –ù–∞–∂–º–∏ ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É¬ª ‚Üí ¬´–≠–∫—Å–ø–æ—Ä—Ç CSV¬ª
4. –ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—é–¥–∞ –≤ –±–æ—Ç

<b>–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:</b>
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –∏ –¥–æ—Ö–æ–¥
‚Ä¢ % –ø–æ—Ä—Ç—Ñ–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–ª—Å—è
‚Ä¢ –î–æ–ª—é –ø—Ä–æ–¥–∞–∂ –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç
‚Ä¢ –¢–æ–ø-5/10 —Ç–µ–º –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

<b>–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫:</b> {limits.analytics_remaining}

–ó–∞–≥—Ä—É–∑–∏ CSV-—Ñ–∞–π–ª:"""
            
            await safe_edit_message(
                callback=callback,
                text=analytics_text,
                reply_markup=get_main_menu_keyboard(user.subscription_type)
            )
    
    await callback.answer()


@router.message(F.document)
async def handle_csv_upload(message: Message, state: FSMContext, user: User, limits: Limits):
    """Handle CSV file upload."""
    
    if user.subscription_type == SubscriptionType.FREE:
        await message.answer("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–≤–æ–µ–º —Ç–∞—Ä–∏—Ñ–µ.")
        return
    
    if limits.analytics_remaining <= 0:
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É.")
        return
    
    document: Document = message.document
    
    # Check file type
    if not document.file_name.endswith('.csv'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ CSV-—Ñ–∞–π–ª.")
        return
    
    # Check file size
    if document.file_size > settings.max_file_size:
        await message.answer(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size // 1024 // 1024}MB")
        return
    
    try:
        # Download file
        file_info = await message.bot.get_file(document.file_id)
        file_path = f"{settings.upload_folder}/{user.telegram_id}_{document.file_name}"
        
        # Create upload directory if not exists
        os.makedirs(settings.upload_folder, exist_ok=True)
        
        # Download file
        await message.bot.download_file(file_info.file_path, file_path)
        
        # Save CSV analysis record
        db = SessionLocal()
        try:
            csv_analysis = CSVAnalysis(
                user_id=user.id,
                file_path=file_path,
                month=datetime.now().month,
                year=datetime.now().year,
                status=AnalysisStatus.PENDING
            )
            db.add(csv_analysis)
            db.commit()
            db.refresh(csv_analysis)
            
            # Store CSV analysis ID in state
            await state.update_data(csv_analysis_id=csv_analysis.id)
            await state.set_state(AnalyticsStates.waiting_for_portfolio_size)
            
            # Delete the upload request message and send new one with info prompt
            await message.delete()
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(LEXICON_RU['csv_upload_info_start'])
            # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            await message.answer(LEXICON_RU['ask_portfolio_size'])
            
        finally:
            db.close()
            
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


@router.message(AnalyticsStates.waiting_for_portfolio_size)
async def handle_portfolio_size(message: Message, state: FSMContext):
    """Handle portfolio size input."""
    
    try:
        portfolio_size = int(message.text)
        if portfolio_size <= 0:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(portfolio_size=portfolio_size)
        await state.set_state(AnalyticsStates.waiting_for_upload_limit)
        
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await message.answer(LEXICON_RU['ask_monthly_limit'])
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")


@router.message(AnalyticsStates.waiting_for_upload_limit)
async def handle_upload_limit(message: Message, state: FSMContext):
    """Handle upload limit input."""
    
    try:
        upload_limit = int(message.text)
        if upload_limit <= 0:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(upload_limit=upload_limit)
        await state.set_state(AnalyticsStates.waiting_for_monthly_uploads)
        
        await message.answer(LEXICON_RU['ask_monthly_uploads'])
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")


@router.message(AnalyticsStates.waiting_for_monthly_uploads)
async def handle_monthly_uploads(message: Message, state: FSMContext):
    """Handle monthly uploads input."""
    
    try:
        monthly_uploads = int(message.text)
        if monthly_uploads < 0:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(monthly_uploads=monthly_uploads)
        await state.set_state(AnalyticsStates.waiting_for_profit_margin)
        
        await message.answer(LEXICON_RU['ask_profit_percentage'])
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")




@router.message(AnalyticsStates.waiting_for_profit_margin)
async def handle_profit_margin(message: Message, state: FSMContext):
    """Handle profit margin input."""
    
    try:
        profit_margin = float(message.text)
        if profit_margin < 0 or profit_margin > 100:
            await message.answer("‚ö†Ô∏è % –ø—Ä–∏–±—ã–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(profit_margin=profit_margin)
        await state.set_state(AnalyticsStates.waiting_for_content_type)
        
        # Create keyboard with content type options
        content_type_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="ü§ñ AI", callback_data="content_type_AI"),
                InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="content_type_PHOTO")
            ],
            [
                InlineKeyboardButton(text="üé® –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="content_type_ILLUSTRATION"),
                InlineKeyboardButton(text="üé¨ –í–∏–¥–µ–æ", callback_data="content_type_VIDEO")
            ],
            [
                InlineKeyboardButton(text="üìê –í–µ–∫—Ç–æ—Ä", callback_data="content_type_VECTOR")
            ]
        ])
        
        await message.answer(
            LEXICON_RU['ask_content_type'],
            reply_markup=content_type_keyboard
        )
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")


@router.callback_query(F.data.startswith("content_type_"))
async def handle_content_type_callback(callback: CallbackQuery, state: FSMContext, user: User, limits: Limits):
    """Handle content type selection via callback."""
    
    # Extract content type from callback data
    content_type = callback.data.replace("content_type_", "")
    
    # Get all data from state
    data = await state.get_data()
    
    # Update CSV analysis with user data
    db = SessionLocal()
    try:
        csv_analysis = db.query(CSVAnalysis).filter(
            CSVAnalysis.id == data["csv_analysis_id"]
        ).first()
        
        if csv_analysis:
            csv_analysis.portfolio_size = data["portfolio_size"]
            csv_analysis.upload_limit = data["upload_limit"]
            csv_analysis.monthly_uploads = data["monthly_uploads"]
            csv_analysis.acceptance_rate = data.get("acceptance_rate", 65.0)  # Default
            csv_analysis.profit_margin = data["profit_margin"]
            csv_analysis.content_type = content_type
            csv_analysis.status = AnalysisStatus.PROCESSING
            
            db.commit()
        
        # Decrease analytics limit
        limits.analytics_used += 1
        db.commit()
        
    finally:
        db.close()
    
    # Clear state
    await state.clear()
    
    # Show processing message
    await callback.message.edit_text(LEXICON_RU['csv_processing'])
    
    # Process CSV in background
    asyncio.create_task(process_csv_analysis(data["csv_analysis_id"], callback.message))
    
    await callback.answer()


@router.message(AnalyticsStates.waiting_for_content_type)
async def handle_content_type_text(message: Message, state: FSMContext, user: User, limits: Limits):
    """Handle content type text input (fallback for manual typing)."""
    
    content_type = message.text.strip().upper()
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_type_mapping = {
        'AI': 'AI',
        '–§–û–¢–û': 'PHOTO',
        'PHOTO': 'PHOTO',
        '–ò–õ–õ–Æ–°–¢–†–ê–¶–ò–ò': 'ILLUSTRATION',
        'ILLUSTRATION': 'ILLUSTRATION',
        '–í–ò–î–ï–û': 'VIDEO',
        'VIDEO': 'VIDEO',
        '–í–ï–ö–¢–û–†': 'VECTOR',
        'VECTOR': 'VECTOR'
    }
    
    content_type_enum = content_type_mapping.get(content_type, 'PHOTO')
    
    # Get all data from state
    data = await state.get_data()
    
    # Update CSV analysis with user data
    db = SessionLocal()
    try:
        csv_analysis = db.query(CSVAnalysis).filter(
            CSVAnalysis.id == data["csv_analysis_id"]
        ).first()
        
        if csv_analysis:
            csv_analysis.portfolio_size = data["portfolio_size"]
            csv_analysis.upload_limit = data["upload_limit"]
            csv_analysis.monthly_uploads = data["monthly_uploads"]
            csv_analysis.acceptance_rate = data.get("acceptance_rate", 65.0)  # Default
            csv_analysis.profit_margin = data["profit_margin"]
            csv_analysis.content_type = content_type_enum
            csv_analysis.status = AnalysisStatus.PROCESSING
            
            db.commit()
        
        # Decrease analytics limit
        limits.analytics_used += 1
        db.commit()
        
    finally:
        db.close()
    
    # Clear state
    await state.clear()
    
    # Show processing message
    await message.answer(LEXICON_RU['csv_processing'])
    
    # Process CSV in background
    asyncio.create_task(process_csv_analysis(data["csv_analysis_id"], message))


async def process_csv_analysis(csv_analysis_id: int, message: Message):
    """Process CSV analysis in background using advanced processor."""
    
    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É CSV –∞–Ω–∞–ª–∏–∑–∞ {csv_analysis_id}")
    
    try:
        # Use advanced CSV processor
        advanced_processor = AdvancedCSVProcessor()
        db = SessionLocal()
        
        try:
            csv_analysis = db.query(CSVAnalysis).filter(
                CSVAnalysis.id == csv_analysis_id
            ).first()
            
            if not csv_analysis:
                print(f"‚ùå CSV –∞–Ω–∞–ª–∏–∑ {csv_analysis_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # Get user for main menu
            user = db.query(User).filter(User.id == csv_analysis.user_id).first()
            if not user:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è CSV –∞–Ω–∞–ª–∏–∑–∞ {csv_analysis_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {csv_analysis.file_path}")
            
            # Process CSV with advanced processor
            result = advanced_processor.process_csv(
                csv_path=csv_analysis.file_path,
                portfolio_size=csv_analysis.portfolio_size or 100,
                upload_limit=csv_analysis.upload_limit or 50,
                monthly_uploads=csv_analysis.monthly_uploads or 30,
                acceptance_rate=csv_analysis.acceptance_rate or 65.0
            )
            
            print(f"‚úÖ CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result.rows_used} –ø—Ä–æ–¥–∞–∂, ${result.total_revenue_usd}")
            
            # Generate bot report using fixed generator
            report_generator = FixedReportGenerator()
            report_text = report_generator.generate_monthly_report(result)
            
            # Save results to database
            
            # Create analytics report
            analytics_report = AnalyticsReport(
                csv_analysis_id=csv_analysis_id,
                total_sales=result.rows_used,
                total_revenue=result.total_revenue_usd,
                portfolio_sold_percent=result.portfolio_sold_percent,
                new_works_sales_percent=result.new_works_sales_percent,
                acceptance_rate_calc=result.acceptance_rate,
                upload_limit_usage=result.upload_limit_usage
            )
            db.add(analytics_report)
            db.flush()
            
            # Save top themes
            for i, (_, row) in enumerate(result.top10_by_revenue.head(10).iterrows()):
                top_theme = TopTheme(
                    csv_analysis_id=csv_analysis_id,
                    theme_name=row['asset_title'],
                    sales_count=int(row['total_sales']),
                    revenue=float(row['total_revenue']),
                    rank=i + 1
                )
                db.add(top_theme)
            
            # Update CSV analysis status
            csv_analysis.status = AnalysisStatus.COMPLETED
            csv_analysis.processed_at = datetime.now(timezone.utc)
            
            db.commit()
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # Edit processing message to show report
            await safe_edit_message(
                callback=None,
                message=message,
                text=report_text,
                reply_markup=get_main_menu_keyboard(user.subscription_type)
            )
            
            print(f"‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV –∞–Ω–∞–ª–∏–∑–∞ {csv_analysis_id}: {e}")
        import traceback
        traceback.print_exc()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ FAILED
        try:
            db = SessionLocal()
            csv_analysis = db.query(CSVAnalysis).filter(CSVAnalysis.id == csv_analysis_id).first()
            if csv_analysis:
                csv_analysis.status = AnalysisStatus.FAILED
                db.commit()
            db.close()
        except Exception as db_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {db_error}")
        
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
