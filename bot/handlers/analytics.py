"""Analytics handler."""

import os
import shutil
from datetime import datetime, timezone
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, Document
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session

from config.database import SessionLocal
from database.models import User, SubscriptionType, CSVAnalysis, AnalysisStatus, Limits, AnalyticsReport, TopTheme
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.states.analytics import AnalyticsStates
from core.analytics.csv_parser import CSVParser
from core.analytics.report_generator import ReportGenerator
from core.analytics.advanced_csv_processor import AdvancedCSVProcessor
from core.analytics.report_generator_fixed import FixedReportGenerator
from config.settings import settings

router = Router()


@router.callback_query(F.data == "analytics")
async def analytics_callback(callback: CallbackQuery, user: User, limits: Limits):
    """Handle analytics callback."""
    
    if user.subscription_type == SubscriptionType.FREE:
        # Show limitation message for FREE users
        limitation_text = """üö´ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–≤–æ–µ–º —Ç–∞—Ä–∏—Ñ–µ.

‚ö°Ô∏è –ü–æ–∫–∞ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å —É—Ä–µ–∑–∞–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º, –¥—Ä—É–≥–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ PRO –∏ –æ–±–≥–æ–Ω—è—é—Ç —Ç–µ–±—è –Ω–∞ —Å—Ç–æ–∫–∞—Ö.

–ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –¥—É–º–∞–µ—à—å ‚Äî –≤–æ–∑—å–º–∏ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü PRO —Å–æ —Å–∫–∏–¥–∫–æ–π 30% –∏ —Å–∞–º —É–±–µ–¥–∏—Å—å –≤ –µ–≥–æ –ø–æ–ª—å–∑–µ."""
        
        try:
            await callback.message.edit_text(
                limitation_text,
                reply_markup=get_main_menu_keyboard(user.subscription_type)
            )
        except Exception as e:
            # If message is not modified, just send a new one
            await callback.message.answer(
                limitation_text,
                reply_markup=get_main_menu_keyboard(user.subscription_type)
            )
    else:
        # Check limits
        if limits.analytics_remaining <= 0:
            limit_text = """üö´ –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É.

–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤."""
            
            try:
                await callback.message.edit_text(
                    limit_text,
                    reply_markup=get_main_menu_keyboard(user.subscription_type)
                )
            except Exception as e:
                # If message is not modified, just send a new one
                await callback.message.answer(
                    limit_text,
                    reply_markup=get_main_menu_keyboard(user.subscription_type)
                )
        else:
            # Show analytics interface for PRO users
            analytics_text = f"""üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è**

–ó–∞–≥—Ä—É–∑–∏ CSV-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ Adobe Stock –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Adobe Stock –∑–∞–π–¥–∏ –≤ ¬´–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª
2. –í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - –¥–µ–π—Å—Ç–≤–∏–µ, –ø–µ—Ä–∏–æ–¥ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü
3. –ù–∞–∂–º–∏ ¬´–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É¬ª ‚Üí ¬´–≠–∫—Å–ø–æ—Ä—Ç CSV¬ª
4. –ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—é–¥–∞ –≤ –±–æ—Ç

**–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:**
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ –∏ –¥–æ—Ö–æ–¥
‚Ä¢ % –ø–æ—Ä—Ç—Ñ–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞–ª—Å—è
‚Ä¢ –î–æ–ª—é –ø—Ä–æ–¥–∞–∂ –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç
‚Ä¢ –¢–æ–ø-5/10 —Ç–µ–º –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

**–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫:** {limits.analytics_remaining}

–ó–∞–≥—Ä—É–∑–∏ CSV-—Ñ–∞–π–ª:"""
            
            try:
                await callback.message.edit_text(
                    analytics_text,
                    reply_markup=get_main_menu_keyboard(user.subscription_type)
                )
            except Exception as e:
                # If message is not modified, just send a new one
                await callback.message.answer(
                    analytics_text,
                    reply_markup=get_main_menu_keyboard(user.subscription_type)
                )
    
    await callback.answer()


@router.message(F.document)
async def handle_csv_upload(message: Message, state: FSMContext, user: User, limits: Limits):
    """Handle CSV file upload."""
    
    if user.subscription_type == SubscriptionType.FREE:
        await message.answer("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–≤–æ–µ–º —Ç–∞—Ä–∏—Ñ–µ.")
        return
    
    if limits.analytics_remaining <= 0:
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É.")
        return
    
    document: Document = message.document
    
    # Check file type
    if not document.file_name.endswith('.csv'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ CSV-—Ñ–∞–π–ª.")
        return
    
    # Check file size
    if document.file_size > settings.max_file_size:
        await message.answer(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size // 1024 // 1024}MB")
        return
    
    try:
        # Download file
        file_info = await message.bot.get_file(document.file_id)
        file_path = f"{settings.upload_folder}/{user.telegram_id}_{document.file_name}"
        
        # Create upload directory if not exists
        os.makedirs(settings.upload_folder, exist_ok=True)
        
        # Download file
        await message.bot.download_file(file_info.file_path, file_path)
        
        # Save CSV analysis record
        db = SessionLocal()
        try:
            csv_analysis = CSVAnalysis(
                user_id=user.id,
                file_path=file_path,
                month=datetime.now().month,
                year=datetime.now().year,
                status=AnalysisStatus.PENDING
            )
            db.add(csv_analysis)
            db.commit()
            db.refresh(csv_analysis)
            
            # Store CSV analysis ID in state
            await state.update_data(csv_analysis_id=csv_analysis.id)
            await state.set_state(AnalyticsStates.waiting_for_portfolio_size)
            
            await message.answer(
                "‚úÖ CSV-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                "üìä **–†–∞–∑–º–µ—Ä —Ç–≤–æ–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è** (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤):"
            )
            
        finally:
            db.close()
            
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")


@router.message(AnalyticsStates.waiting_for_portfolio_size)
async def handle_portfolio_size(message: Message, state: FSMContext):
    """Handle portfolio size input."""
    
    try:
        portfolio_size = int(message.text)
        if portfolio_size <= 0:
            await message.answer("–†–∞–∑–º–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(portfolio_size=portfolio_size)
        await state.set_state(AnalyticsStates.waiting_for_upload_limit)
        
        await message.answer(
            "‚úÖ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "üì§ **–¢–≤–æ–π –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –º–µ—Å—è—Ü:**"
        )
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")


@router.message(AnalyticsStates.waiting_for_upload_limit)
async def handle_upload_limit(message: Message, state: FSMContext):
    """Handle upload limit input."""
    
    try:
        upload_limit = int(message.text)
        if upload_limit <= 0:
            await message.answer("–õ–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(upload_limit=upload_limit)
        await state.set_state(AnalyticsStates.waiting_for_monthly_uploads)
        
        await message.answer(
            "‚úÖ –õ–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "üìà **–°–∫–æ–ª—å–∫–æ –æ–±—ã—á–Ω–æ –≥—Ä—É–∑–∏—à—å –∑–∞ –º–µ—Å—è—Ü:**"
        )
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")


@router.message(AnalyticsStates.waiting_for_monthly_uploads)
async def handle_monthly_uploads(message: Message, state: FSMContext):
    """Handle monthly uploads input."""
    
    try:
        monthly_uploads = int(message.text)
        if monthly_uploads < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(monthly_uploads=monthly_uploads)
        await state.set_state(AnalyticsStates.waiting_for_acceptance_rate)
        
        await message.answer(
            "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            "‚úÖ **% –ø—Ä–∏–µ–º–∫–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä, 65):"
        )
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")


@router.message(AnalyticsStates.waiting_for_acceptance_rate)
async def handle_acceptance_rate(message: Message, state: FSMContext):
    """Handle acceptance rate input."""
    
    try:
        acceptance_rate = float(message.text)
        if acceptance_rate < 0 or acceptance_rate > 100:
            await message.answer("% –ø—Ä–∏–µ–º–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(acceptance_rate=acceptance_rate)
        await state.set_state(AnalyticsStates.waiting_for_profit_margin)
        
        await message.answer(
            "‚úÖ % –ø—Ä–∏–µ–º–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "üí∞ **% –ø—Ä–∏–±—ã–ª–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25):"
        )
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")


@router.message(AnalyticsStates.waiting_for_profit_margin)
async def handle_profit_margin(message: Message, state: FSMContext):
    """Handle profit margin input."""
    
    try:
        profit_margin = float(message.text)
        if profit_margin < 0 or profit_margin > 100:
            await message.answer("% –ø—Ä–∏–±—ã–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(profit_margin=profit_margin)
        await state.set_state(AnalyticsStates.waiting_for_content_type)
        
        await message.answer(
            "‚úÖ % –ø—Ä–∏–±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "üé® **–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞** (AI/—Ñ–æ—Ç–æ/–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏/–≤–∏–¥–µ–æ/–≤–µ–∫—Ç–æ—Ä):"
        )
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")


@router.message(AnalyticsStates.waiting_for_content_type)
async def handle_content_type(message: Message, state: FSMContext, user: User, limits: Limits):
    """Handle content type input and start processing."""
    
    content_type = message.text.strip().upper()
    valid_types = ["AI", "–§–û–¢–û", "–ò–õ–õ–Æ–°–¢–†–ê–¶–ò–ò", "–í–ò–î–ï–û", "–í–ï–ö–¢–û–†"]
    
    if content_type not in valid_types:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤: AI, —Ñ–æ—Ç–æ, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, –≤–∏–¥–µ–æ, –≤–µ–∫—Ç–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # Convert Russian values to English enum values
    content_type_mapping = {
        '–§–û–¢–û': 'PHOTO',
        '–ò–õ–õ–Æ–°–¢–†–ê–¶–ò–ò': 'ILLUSTRATION', 
        '–í–ò–î–ï–û': 'VIDEO',
        '–í–ï–ö–¢–û–†': 'VECTOR',
        'AI': 'AI'
    }
    
    content_type_enum = content_type_mapping.get(content_type, 'PHOTO')
    
    # Get all data from state
    data = await state.get_data()
    
    # Update CSV analysis with user data
    db = SessionLocal()
    try:
        csv_analysis = db.query(CSVAnalysis).filter(
            CSVAnalysis.id == data["csv_analysis_id"]
        ).first()
        
        if csv_analysis:
            csv_analysis.portfolio_size = data["portfolio_size"]
            csv_analysis.upload_limit = data["upload_limit"]
            csv_analysis.monthly_uploads = data["monthly_uploads"]
            csv_analysis.acceptance_rate = data["acceptance_rate"]
            csv_analysis.profit_margin = data["profit_margin"]
            csv_analysis.content_type = content_type_enum
            csv_analysis.status = AnalysisStatus.PROCESSING
            
            db.commit()
        
        # Decrease analytics limit
        limits.analytics_used += 1
        db.commit()
        
    finally:
        db.close()
    
    # Clear state
    await state.clear()
    
    # Start processing
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è–ª ‚úÖ\n"
        "–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ (1-2 –º–∏–Ω—É—Ç—ã) - –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, —è –¥–∞–º –∑–Ω–∞—Ç—å. "
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª."
    )
    
    # Process CSV in background
    await process_csv_analysis(data["csv_analysis_id"], message)


async def process_csv_analysis(csv_analysis_id: int, message: Message):
    """Process CSV analysis in background using advanced processor."""
    
    try:
        # Use advanced CSV processor
        advanced_processor = AdvancedCSVProcessor()
        db = SessionLocal()
        
        try:
            csv_analysis = db.query(CSVAnalysis).filter(
                CSVAnalysis.id == csv_analysis_id
            ).first()
            
            if not csv_analysis:
                return
            
            # Process CSV with advanced processor
            result = advanced_processor.process_csv(
                csv_path=csv_analysis.file_path,
                portfolio_size=csv_analysis.portfolio_size or 100,
                upload_limit=csv_analysis.upload_limit or 50,
                monthly_uploads=csv_analysis.monthly_uploads or 30,
                acceptance_rate=csv_analysis.acceptance_rate or 65.0
            )
            
            # Generate bot report using fixed generator
            report_generator = FixedReportGenerator()
            report_text = report_generator.generate_monthly_report(result)
            
            # Save results to database
            
            # Create analytics report
            analytics_report = AnalyticsReport(
                csv_analysis_id=csv_analysis_id,
                total_sales=result.rows_used,
                total_revenue=result.total_revenue_usd,
                portfolio_sold_percent=result.portfolio_sold_percent,
                new_works_sales_percent=result.new_works_sales_percent,
                acceptance_rate_calc=result.acceptance_rate,
                upload_limit_usage=result.upload_limit_usage
            )
            db.add(analytics_report)
            db.flush()
            
            # Save top themes
            for i, (_, row) in enumerate(result.top10_by_revenue.head(10).iterrows()):
                top_theme = TopTheme(
                    csv_analysis_id=csv_analysis_id,
                    theme_name=row['asset_title'],
                    sales_count=int(row['total_sales']),
                    revenue=float(row['total_revenue']),
                    rank=i + 1
                )
                db.add(top_theme)
            
            # Update CSV analysis status
            csv_analysis.status = AnalysisStatus.COMPLETED
            csv_analysis.processed_at = datetime.now(timezone.utc)
            
            db.commit()
            
            # Send report to user
            await message.answer(
                "‚úÖ –ì–æ—Ç–æ–≤–æ\n"
                "–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–¥–µ–ª–∞–º.\n"
                "–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–º? üëá"
            )
            
            await message.answer(report_text)
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"Error processing CSV: {e}")
        import traceback
        traceback.print_exc()
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
