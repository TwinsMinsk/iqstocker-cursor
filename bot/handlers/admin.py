"""Admin commands for bot management."""

import asyncio
from datetime import datetime, timezone, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session

from config.database import SessionLocal
from database.models import (
    User, SubscriptionType, ThemeRequest, UserIssuedTheme,
    AnalyticsReport, CSVAnalysis, Limits
)
from core.admin.broadcast_manager import get_broadcast_manager
from bot.keyboards.main_menu import get_main_menu_keyboard

router = Router()

# Admin states
class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()
    waiting_for_new_works_parameter = State()


def is_admin(user_id: int) -> bool:
    """Check if user is admin."""
    import os
    # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
    admin_ids = [
        811079407,  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω
        441882529,  # –ù–æ–≤—ã–π –∞–¥–º–∏–Ω
    ]
    return user_id in admin_ids


@router.message(F.text.startswith("/admin"))
async def admin_command(message: Message, state: FSMContext):
    """Handle admin command."""
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    admin_text = """üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å IQStocker**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫

üì¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    keyboard = [
        # First button full width (most important)
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        # Remaining buttons in pairs
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
        ],
        [
            InlineKeyboardButton(text="üìà –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="admin_health"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    await message.answer(
        admin_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """Show admin statistics."""
    
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    broadcast_manager = get_broadcast_manager()
    stats = broadcast_manager.get_user_statistics()
    
    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**

üë• **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {stats.get('recent_users', 0)}

üìã **–ü–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:**
‚Ä¢ FREE: {stats.get('subscription_stats', {}).get('FREE', 0)}
‚Ä¢ TEST_PRO: {stats.get('subscription_stats', {}).get('TEST_PRO', 0)}
‚Ä¢ PRO: {stats.get('subscription_stats', {}).get('PRO', 0)}
‚Ä¢ ULTRA: {stats.get('subscription_stats', {}).get('ULTRA', 0)}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.get('last_updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"""
    
    keyboard = [
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
        ]
    ]
    
    try:
        await callback.message.edit_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await callback.message.answer(
            stats_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    await callback.answer()


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery):
    """Show broadcast options."""
    
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    broadcast_text = """üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:

‚Ä¢ **–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º** - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º
‚Ä¢ **FREE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º** - —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º
‚Ä¢ **PRO/ULTRA** - —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å–∫–∞–º
‚Ä¢ **TEST_PRO** - —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–º"""
    
    keyboard = [
        # First button full width (most important)
        [InlineKeyboardButton(text="üë• –í—Å–µ–º", callback_data="broadcast_all")],
        # Remaining buttons in pairs
        [
            InlineKeyboardButton(text="üÜì FREE", callback_data="broadcast_free"),
            InlineKeyboardButton(text="üíé PRO/ULTRA", callback_data="broadcast_pro")
        ],
        [
            InlineKeyboardButton(text="üß™ TEST_PRO", callback_data="broadcast_test_pro"),
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="broadcast_history")
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    
    try:
        await callback.message.edit_text(
            broadcast_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await callback.message.answer(
            broadcast_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    await callback.answer()


@router.callback_query(F.data.startswith("broadcast_"))
async def broadcast_type_callback(callback: CallbackQuery, state: FSMContext):
    """Handle broadcast type selection."""
    
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    broadcast_type = callback.data.replace("broadcast_", "")
    
    if broadcast_type == "history":
        await show_broadcast_history(callback)
        return
    
    # Set broadcast type in state
    await state.update_data(broadcast_type=broadcast_type)
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    
    type_names = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "free": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º FREE",
        "pro": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º PRO/ULTRA",
        "test_pro": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º TEST_PRO"
    }
    
    try:
        await callback.message.edit_text(
            f"üìù **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {type_names.get(broadcast_type, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')}**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
        )
    except Exception as e:
        await callback.message.answer(
            f"üìù **–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ {type_names.get(broadcast_type, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')}**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
        )
    await callback.answer()


async def show_broadcast_history(callback: CallbackQuery):
    """Show broadcast history."""
    
    broadcast_manager = get_broadcast_manager()
    history = broadcast_manager.get_broadcast_history(limit=10)
    
    if not history:
        history_text = "üìã **–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫**\n\n–†–∞—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ."
    else:
        history_text = "üìã **–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫**\n\n"
        for item in history:
            history_text += f"üìÖ {item['sent_at']}\n"
            history_text += f"üìù {item['message']}\n"
            history_text += f"üë• {item['sent_count']}/{item['recipients_count']} ({item['success_rate']}%)\n"
            if item['subscription_type']:
                history_text += f"üéØ {item['subscription_type']}\n"
            history_text += "\n"
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–∞–º", callback_data="admin_broadcast")
        ]
    ]
    
    try:
        await callback.message.edit_text(
            history_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await callback.message.answer(
            history_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )


@router.message(AdminStates.waiting_for_broadcast_message)
async def handle_broadcast_message(message: Message, state: FSMContext):
    """Handle broadcast message input."""
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    if message.text == "/cancel":
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    
    # Get broadcast type from state
    data = await state.get_data()
    broadcast_type = data.get("broadcast_type", "all")
    
    # Determine subscription type
    subscription_type = None
    if broadcast_type == "free":
        subscription_type = SubscriptionType.FREE
    elif broadcast_type == "pro":
        subscription_type = SubscriptionType.PRO  # Will include ULTRA too
    elif broadcast_type == "test_pro":
        subscription_type = SubscriptionType.TEST_PRO
    
    # Send broadcast
    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    broadcast_manager = get_broadcast_manager()
    result = await broadcast_manager.send_broadcast(
        message.text,
        subscription_type,
        message.from_user.id
    )
    
    if result["success"]:
        success_text = f"""‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['sent_count']}
‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {result['failed_count']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {result['total_users']}

üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**
{message.text[:200]}{'...' if len(message.text) > 200 else ''}"""
    else:
        success_text = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:**\n{result['message']}"
    
    keyboard = [
        [
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="broadcast_history")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
        ]
    ]
    
    await message.answer(
        success_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    
    await state.clear()


@router.callback_query(F.data == "admin_system")
async def admin_system_callback(callback: CallbackQuery):
    """Show system management options."""
    
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    system_text = """‚öôÔ∏è **–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤** - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä "–Ω–æ–≤—ã—Ö" —Ä–∞–±–æ—Ç
‚Ä¢ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö** - –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ **–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞** - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã** - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    keyboard = [
        # First button full width (most important)
        [InlineKeyboardButton(text="üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="admin_params")],
        # Remaining buttons in pairs
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_refresh"),
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin_clear_cache")
        ],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ]
    
    try:
        await callback.message.edit_text(
            system_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await callback.message.answer(
            system_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    await callback.answer()


@router.callback_query(F.data == "admin_health")
async def admin_health_callback(callback: CallbackQuery):
    """Show system health status."""
    
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    broadcast_manager = get_broadcast_manager()
    health = broadcast_manager.get_system_health()
    
    health_text = f"""üìà **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã**

üü¢ **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {health.get('database', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ Telegram –±–æ—Ç: {health.get('bot', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –û—à–∏–±–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {health.get('recent_errors', 0)}

üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {health.get('last_check', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"""
    
    keyboard = [
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_health")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
        ]
    ]
    
    try:
        await callback.message.edit_text(
            health_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await callback.message.answer(
            health_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    await callback.answer()


@router.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: CallbackQuery):
    """Return to admin main menu."""
    
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    admin_text = """üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å IQStocker**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫

üì¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    keyboard = [
        # First button full width (most important)
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        # Remaining buttons in pairs
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")
        ],
        [
            InlineKeyboardButton(text="üìà –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="admin_health"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    try:
        await callback.message.edit_text(
            admin_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        await callback.message.answer(
            admin_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    await callback.answer()


@router.message(F.text == "/resetme")
async def resetme_command(message: Message, state: FSMContext):
    """Reset admin profile for testing new user flow."""
    
    # Silent check - if not admin, do nothing
    if not is_admin(message.from_user.id):
        return
    
    db = SessionLocal()
    try:
        # Get admin user
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Delete all related data
        # 1. Theme requests (only ISSUED ones, keep READY themes for system)
        db.query(ThemeRequest).filter(
            ThemeRequest.user_id == user.id,
            ThemeRequest.status == "ISSUED"
        ).delete()
        
        # 2. Issued themes
        db.query(UserIssuedTheme).filter(UserIssuedTheme.user_id == user.id).delete()
        
        # 3. CSV analyses (this will cascade to analytics reports and top themes)
        csv_analyses = db.query(CSVAnalysis).filter(CSVAnalysis.user_id == user.id).all()
        for csv_analysis in csv_analyses:
            # Delete related analytics reports
            db.query(AnalyticsReport).filter(AnalyticsReport.csv_analysis_id == csv_analysis.id).delete()
            # Delete the CSV analysis itself
            db.delete(csv_analysis)
        
        # Reset user to default state (like new user with trial)
        now = datetime.now(timezone.utc)
        test_pro_expires = now + timedelta(days=14)
        
        user.subscription_type = SubscriptionType.TEST_PRO
        user.test_pro_started_at = now
        user.subscription_expires_at = test_pro_expires
        user.created_at = now
        user.updated_at = now
        
        # Reset limits to TEST_PRO values
        limits = db.query(Limits).filter(Limits.user_id == user.id).first()
        if limits:
            limits.analytics_total = 1
            limits.analytics_used = 0
            limits.themes_total = 5
            limits.themes_used = 0
        else:
            # Create limits if not exist
            limits = Limits(
                user_id=user.id,
                analytics_total=1,
                analytics_used=0,
                themes_total=5,
                themes_used=0
            )
            db.add(limits)
        
        db.commit()
        
        # Success message
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –æ–Ω–±–æ—Ä–¥–∏–Ω–≥...")
        
        # Pause
        await asyncio.sleep(1)
        
        # Clear state
        await state.clear()
        
        # Restart onboarding - call the welcome sequence from start.py
        from bot.handlers.start import send_welcome_sequence
        await send_welcome_sequence(message, user)
        
    except Exception as e:
        db.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
    finally:
        db.close()
