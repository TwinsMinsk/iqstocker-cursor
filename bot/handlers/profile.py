"""Profile handler."""

from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy.orm import Session

from config.database import SessionLocal
from database.models import User, Limits, SubscriptionType
from config.settings import settings
from bot.keyboards.profile import get_profile_keyboard
from bot.keyboards.main_menu import get_main_menu_keyboard

router = Router()


@router.callback_query(F.data == "profile")
async def profile_callback(callback: CallbackQuery, user: User, limits: Limits):
    """Handle profile callback."""
    
    # Calculate subscription info
    subscription_info = ""
    if user.subscription_type == SubscriptionType.TEST_PRO:
        if user.test_pro_started_at:
            expires_at = user.test_pro_started_at + timedelta(days=settings.test_pro_duration_days)
            days_left = (expires_at - datetime.utcnow()).days
            subscription_info = f"üéØ **TEST PRO** (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"
        else:
            subscription_info = "üéØ **TEST PRO**"
    elif user.subscription_type == SubscriptionType.FREE:
        subscription_info = "üÜì **FREE**"
    elif user.subscription_type == SubscriptionType.PRO:
        subscription_info = "üèÜ **PRO**"
    elif user.subscription_type == SubscriptionType.ULTRA:
        subscription_info = "üöÄ **ULTRA**"
    
    # Limits info
    limits_text = f"""
üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:** {limits.analytics_used}/{limits.analytics_total}
üéØ **–¢–µ–º—ã:** {limits.themes_used}/{limits.themes_total}
üèÜ **–¢–æ–ø —Ç–µ–º:** {limits.top_themes_used}/{limits.top_themes_total}
"""
    
    profile_text = f"""üë§ **–ü—Ä–æ—Ñ–∏–ª—å**

**–ü–æ–¥–ø–∏—Å–∫–∞:** {subscription_info}

**–õ–∏–º–∏—Ç—ã:**
{limits_text}

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_keyboard(user.subscription_type)
    )
    await callback.answer()


@router.callback_query(F.data == "limits_info")
async def limits_info_callback(callback: CallbackQuery, user: User):
    """Handle limits info callback."""
    
    limits_text = """‚ùì **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏–º–∏—Ç—ã?**

–õ–∏–º–∏—Ç—ã –Ω–µ –æ–±–Ω—É–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, –æ–Ω–∏ –∫–æ–ø—è—Ç—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.

üìä **–õ–∏–º–∏—Ç –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É** = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CSV-—Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –ö–∞–∂–¥—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV —Å–ø–∏—Å—ã–≤–∞–µ—Ç 1 –ª–∏–º–∏—Ç.

üéØ **–õ–∏–º–∏—Ç –Ω–∞ —Ç–µ–º—ã** = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É —Ç–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –û–±—ã—á–Ω–æ —ç—Ç–æ 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (= 4 –≤ –º–µ—Å—è—Ü), –Ω–æ –ª–∏–º–∏—Ç—ã –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.

üèÜ **–õ–∏–º–∏—Ç –Ω–∞ —Ç–æ–ø —Ç–µ–º** –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –ö–æ–≥–¥–∞ —Ç—ã –∑–∞–≥—Ä—É–∂–∞–µ—à—å CSV –∏ —Ä–∞—Å—Ö–æ–¥—É–µ—à—å –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –≤–º–µ—Å—Ç–µ —Å —ç—Ç–∏–º —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è 1 –ª–∏–º–∏—Ç –∫ —Ä–∞–∑–¥–µ–ª—É ¬´–¢–æ–ø —Ç–µ–º¬ª."""
    
    await callback.message.edit_text(
        limits_text,
        reply_markup=get_profile_keyboard(user.subscription_type)
    )
    await callback.answer()


@router.callback_query(F.data == "compare_free_pro")
async def compare_free_pro_callback(callback: CallbackQuery, user: User):
    """Handle compare FREE and PRO callback."""
    
    compare_text = """üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ FREE –∏ PRO**

| –§—É–Ω–∫—Ü–∏—è | FREE | PRO |
|---------|------|-----|
| –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è | ‚ùå | ‚úÖ |
| –¢–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/—Å—ä—ë–º–æ–∫ | 1 —Ç–µ–º–∞/–Ω–µ–¥–µ–ª—è | 5 —Ç–µ–º/–Ω–µ–¥–µ–ª—è |
| –¢–æ–ø-—Ç–µ–º—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –¥–æ—Ö–æ–¥—É | ‚ùå | ‚úÖ |
| –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç–æ–∫–µ—Ä–∞ | –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π | –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π |
| –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ | –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ | –í—Å–µ |

**PRO –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ—Å—Ç–∞!**"""
    
    await callback.message.edit_text(
        compare_text,
        reply_markup=get_profile_keyboard(user.subscription_type)
    )
    await callback.answer()


@router.callback_query(F.data == "compare_pro_ultra")
async def compare_pro_ultra_callback(callback: CallbackQuery, user: User):
    """Handle compare PRO and ULTRA callback."""
    
    compare_text = """üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ PRO –∏ ULTRA**

| –§—É–Ω–∫—Ü–∏—è | PRO | ULTRA |
|---------|-----|-------|
| –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è | 2/–º–µ—Å | 4/–º–µ—Å |
| –¢–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/—Å—ä—ë–º–æ–∫ | 5 —Ç–µ–º/–Ω–µ–¥–µ–ª—è | 10 —Ç–µ–º/–Ω–µ–¥–µ–ª—è |
| –¢–æ–ø-—Ç–µ–º—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –¥–æ—Ö–æ–¥—É | –¢–æ–ø-5 | –¢–æ–ø-10 |
| –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç–æ–∫–µ—Ä–∞ | –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π | –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π |
| –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ | –í—Å–µ | –í—Å–µ |

**ULTRA –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞!**"""
    
    await callback.message.edit_text(
        compare_text,
        reply_markup=get_profile_keyboard(user.subscription_type)
    )
    await callback.answer()


@router.callback_query(F.data == "upgrade_pro")
async def upgrade_pro_callback(callback: CallbackQuery, user: User):
    """Handle upgrade to PRO callback."""
    
    # Get discount information
    from core.subscriptions.payment_handler import PaymentHandler
    payment_handler = PaymentHandler()
    discount_info = payment_handler.get_discount_info(user.subscription_type)
    
    # Calculate price with discount
    base_price = 990
    if discount_info["has_discount"]:
        discounted_price = base_price * (1 - discount_info["discount_percent"] / 100)
        price_text = f"~~{base_price}‚ÇΩ~~ **{discounted_price:.0f}‚ÇΩ** ({discount_info['discount_percent']}% —Å–∫–∏–¥–∫–∞)"
        discount_message = f"\nüéâ **{discount_info['message']}**"
    else:
        price_text = f"**{base_price}‚ÇΩ/–º–µ—Å—è—Ü**"
        discount_message = ""
    
    upgrade_text = f"""üèÜ **–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ PRO**

PRO –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ 2 –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –º–µ—Å—è—Ü
‚Ä¢ 5 —Ç–µ–º –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –¢–æ–ø-5 —Ç–µ–º –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç–æ–∫–µ—Ä–∞
‚Ä¢ –í—Å–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏

**–¶–µ–Ω–∞:** {price_text}{discount_message}

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: [Boosty PRO](https://boosty.to/iqstocker/pro)"""
    
    await callback.message.edit_text(
        upgrade_text,
        reply_markup=get_profile_keyboard(user.subscription_type)
    )
    await callback.answer()


@router.callback_query(F.data == "upgrade_ultra")
async def upgrade_ultra_callback(callback: CallbackQuery, user: User):
    """Handle upgrade to ULTRA callback."""
    
    # Get discount information
    from core.subscriptions.payment_handler import PaymentHandler
    payment_handler = PaymentHandler()
    discount_info = payment_handler.get_discount_info(user.subscription_type)
    
    # Calculate price with discount
    base_price = 1990
    if discount_info["has_discount"]:
        discounted_price = base_price * (1 - discount_info["discount_percent"] / 100)
        price_text = f"~~{base_price}‚ÇΩ~~ **{discounted_price:.0f}‚ÇΩ** ({discount_info['discount_percent']}% —Å–∫–∏–¥–∫–∞)"
        discount_message = f"\nüéâ **{discount_info['message']}**"
    else:
        price_text = f"**{base_price}‚ÇΩ/–º–µ—Å—è—Ü**"
        discount_message = ""
    
    upgrade_text = f"""üöÄ **–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ ULTRA**

ULTRA –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ 4 –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –º–µ—Å—è—Ü
‚Ä¢ 10 —Ç–µ–º –≤ –Ω–µ–¥–µ–ª—é
‚Ä¢ –¢–æ–ø-10 —Ç–µ–º –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ç–æ–∫–µ—Ä–∞
‚Ä¢ –í—Å–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏

**–¶–µ–Ω–∞:** {price_text}{discount_message}

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: [Boosty ULTRA](https://boosty.to/iqstocker/ultra)"""
    
    await callback.message.edit_text(
        upgrade_text,
        reply_markup=get_profile_keyboard(user.subscription_type)
    )
    await callback.answer()


@router.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery):
    """Handle noop callback."""
    await callback.answer("–£ —Ç–µ–±—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ! üéâ")
