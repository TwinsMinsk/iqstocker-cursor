#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = Path("local.env")
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

async def test_report_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤...")
    
    try:
        from core.analytics.advanced_csv_processor import AdvancedCSVProcessor, AdvancedProcessResult
        from core.analytics.report_generator_fixed import FixedReportGenerator
        from bot.handlers.analytics import escape_markdown, escape_markdown_preserve_formatting
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
        test_csv_path = "uploads/test_formatting_analysis.csv"
        
        test_data = """2025-01-15T10:00:00+00:00,12345,Test Photo 1,custom,1.50,photos,test1.jpg,user1,HD
2025-01-16T11:00:00+00:00,12346,Test Photo 2,subscription,2.00,photos,test2.jpg,user1,XXL
2025-01-17T12:00:00+00:00,12347,Test Video 1,custom,3.00,videos,test3.mp4,user1,HD1080
2025-01-18T13:00:00+00:00,12348,Test Illustration 1,custom,2.50,illustrations,test4.ai,user1,Vector
2025-01-19T14:00:00+00:00,12349,Test Photo 3,subscription,1.75,photos,test5.jpg,user1,HD
2025-01-20T15:00:00+00:00,12350,Test Photo 4,custom,2.25,photos,test6.jpg,user1,XXL
2025-01-21T16:00:00+00:00,12351,Test Video 2,subscription,4.00,videos,test7.mp4,user1,HD1080
2025-01-22T17:00:00+00:00,12352,Test Illustration 2,custom,3.50,illustrations,test8.ai,user1,Vector
2025-01-23T18:00:00+00:00,12353,Test Photo 5,custom,1.25,photos,test9.jpg,user1,HD
2025-01-24T19:00:00+00:00,12354,Test Video 3,subscription,5.00,videos,test10.mp4,user1,HD1080"""
        
        with open(test_csv_path, 'w', encoding='utf-8') as f:
            f.write(test_data)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π CSV —Å–æ–∑–¥–∞–Ω: {test_csv_path}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV
        processor = AdvancedCSVProcessor()
        result = processor.process_csv(
            csv_path=test_csv_path,
            portfolio_size=100,
            upload_limit=50,
            monthly_uploads=30,
            acceptance_rate=65.0
        )
        
        print(f"‚úÖ CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result.rows_used} –ø—Ä–æ–¥–∞–∂, ${result.total_revenue_usd}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        generator = FixedReportGenerator()
        report_text = generator.generate_monthly_report(result)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–¥–ª–∏–Ω–∞: {len(report_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        old_escaped = escape_markdown(report_text)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        new_escaped = escape_markdown_preserve_formatting(report_text)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω (—Å—Ç–∞—Ä—ã–π: {len(old_escaped)}, –Ω–æ–≤—ã–π: {len(new_escaped)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        print("üî¥ –°–¢–ê–†–û–ï –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï (–ª–æ–º–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):")
        print("-" * 50)
        print(old_escaped[:300])
        print("-" * 50)
        
        print("üü¢ –ù–û–í–û–ï –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):")
        print("-" * 50)
        print(new_escaped[:300])
        print("-" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        has_bold_formatting = '**' in new_escaped
        has_italic_formatting = '*' in new_escaped and '**' not in new_escaped
        
        print(f"\nüìã –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"‚úÖ –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (**): {'–ï—Å—Ç—å' if has_bold_formatting else '–ù–µ—Ç'}")
        print(f"‚úÖ –ö—É—Ä—Å–∏–≤ (*): {'–ï—Å—Ç—å' if has_italic_formatting else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
        problematic_chars = ['-', '(', ')', '.', '!', '_', '[', ']', '`']
        found_problematic = []
        
        for char in problematic_chars:
            if char in new_escaped and f'\\{char}' not in new_escaped:
                found_problematic.append(char)
        
        if found_problematic:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {found_problematic}")
        else:
            print("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_csv_path):
            os.remove(test_csv_path)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
        return len(found_problematic) == 0 and has_bold_formatting
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_menu_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–µ–Ω—é."""
    
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–µ–Ω—é...")
    
    try:
        from bot.keyboards.main_menu import get_main_menu_keyboard
        from database.models import User, SubscriptionType
        
        print("‚úÖ –ú–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
        test_subscriptions = [
            SubscriptionType.FREE,
            SubscriptionType.TEST_PRO,
            SubscriptionType.PRO,
            SubscriptionType.ULTRA
        ]
        
        for sub_type in test_subscriptions:
            keyboard = get_main_menu_keyboard(sub_type)
            print(f"‚úÖ –ú–µ–Ω—é –¥–ª—è {sub_type.value}: {len(keyboard.inline_keyboard)} –∫–Ω–æ–ø–æ–∫")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–µ–Ω—é: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üöÄ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
    success1 = await test_report_formatting()
    
    # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç –º–µ–Ω—é
    success2 = await test_menu_import()
    
    print("\n" + "=" * 70)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤: {'‚úÖ OK' if success1 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    print(f"ü§ñ –ò–º–ø–æ—Ä—Ç –º–µ–Ω—é: {'‚úÖ OK' if success2 else '‚ùå –ü—Ä–æ–±–ª–µ–º–∞'}")
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üí° –û—Ç—á–µ—Ç—ã —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å Markdown.")
        print("üí° –ú–µ–Ω—é –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç—á–µ—Ç–∞.")
        print("üí° –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main())
