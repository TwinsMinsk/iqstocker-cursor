#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = Path("local.env")
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

async def test_csv_processing_async():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É CSV."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É CSV...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from database.models import CSVAnalysis, AnalysisStatus
        from config.database import SessionLocal
        from core.analytics.advanced_csv_processor import AdvancedCSVProcessor
        from core.analytics.report_generator_fixed import FixedReportGenerator
        from datetime import datetime, timezone
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
        test_csv_path = "uploads/test_real_analysis.csv"
        
        test_data = """2025-01-15T10:00:00+00:00,12345,Test Photo 1,custom,1.50,photos,test1.jpg,user1,HD
2025-01-16T11:00:00+00:00,12346,Test Photo 2,subscription,2.00,photos,test2.jpg,user1,XXL
2025-01-17T12:00:00+00:00,12347,Test Video 1,custom,3.00,videos,test3.mp4,user1,HD1080
2025-01-18T13:00:00+00:00,12348,Test Illustration 1,custom,2.50,illustrations,test4.ai,user1,Vector
2025-01-19T14:00:00+00:00,12349,Test Photo 3,subscription,1.75,photos,test5.jpg,user1,HD"""
        
        with open(test_csv_path, 'w', encoding='utf-8') as f:
            f.write(test_data)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π CSV —Å–æ–∑–¥–∞–Ω: {test_csv_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        try:
            csv_analysis = CSVAnalysis(
                user_id=1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                file_path=test_csv_path,
                month=datetime.now().month,
                year=datetime.now().year,
                status=AnalysisStatus.PENDING,
                portfolio_size=100,
                upload_limit=50,
                monthly_uploads=30,
                acceptance_rate=65.0
            )
            db.add(csv_analysis)
            db.commit()
            db.refresh(csv_analysis)
            
            print(f"‚úÖ –ó–∞–ø–∏—Å—å CSV –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {csv_analysis.id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV
            processor = AdvancedCSVProcessor()
            result = processor.process_csv(
                csv_path=csv_analysis.file_path,
                portfolio_size=csv_analysis.portfolio_size or 100,
                upload_limit=csv_analysis.upload_limit or 50,
                monthly_uploads=csv_analysis.monthly_uploads or 30,
                acceptance_rate=csv_analysis.acceptance_rate or 65.0
            )
            
            print(f"‚úÖ CSV –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
            print(f"   - –ü–µ—Ä–∏–æ–¥: {result.period_human_ru}")
            print(f"   - –ü—Ä–æ–¥–∞–∂: {result.rows_used}")
            print(f"   - –î–æ—Ö–æ–¥: ${result.total_revenue_usd}")
            print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤: {result.unique_assets_sold}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            generator = FixedReportGenerator()
            report = generator.generate_monthly_report(result)
            
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–¥–ª–∏–Ω–∞: {len(report)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print("\nüìä –û–¢–ß–ï–¢:")
            print("-" * 50)
            print(report)
            print("-" * 50)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            csv_analysis.status = AnalysisStatus.COMPLETED
            csv_analysis.processed_at = datetime.now(timezone.utc)
            db.commit()
            
            print("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ COMPLETED")
            
        finally:
            db.close()
        
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(test_csv_path):
            os.remove(test_csv_path)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_bot_message_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞."""
    
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        from bot.handlers.analytics import handle_csv_upload
        from aiogram.types import Message, Document, User as TelegramUser
        from aiogram.fsm.context import FSMContext
        from database.models import User, SubscriptionType, Limits
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        class MockBot:
            async def get_file(self, file_id):
                class MockFile:
                    file_path = "uploads/test_file.csv"
                return MockFile()
            
            async def download_file(self, file_path, destination):
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                test_data = "2025-01-15T10:00:00+00:00,12345,Test Photo 1,custom,1.50,photos,test1.jpg,user1,HD"
                with open(destination, 'w', encoding='utf-8') as f:
                    f.write(test_data)
        
        class MockMessage:
            def __init__(self):
                self.bot = MockBot()
                self.document = MockDocument()
            
            async def answer(self, text):
                print(f"üì§ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {text}")
        
        class MockDocument:
            def __init__(self):
                self.file_name = "test.csv"
                self.file_size = 1000
                self.file_id = "test_file_id"
        
        class MockUser:
            def __init__(self):
                self.id = 1
                self.subscription_type = SubscriptionType.PRO
        
        class MockLimits:
            def __init__(self):
                self.analytics_remaining = 5
        
        class MockState:
            async def update_data(self, **kwargs):
                pass
            
            async def set_state(self, state):
                pass
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        message = MockMessage()
        user = MockUser()
        limits = MockLimits()
        state = MockState()
        
        print("‚úÖ –ú–æ–∫ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_csv_upload(message, state, user, limits)
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ CSV –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    success1 = await test_csv_processing_async()
    
    # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
    success2 = await test_bot_message_handling()
    
    print("\n" + "=" * 60)
    if success1 and success2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   - –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram API")
        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV.")
        print("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç.")

if __name__ == "__main__":
    asyncio.run(main())
